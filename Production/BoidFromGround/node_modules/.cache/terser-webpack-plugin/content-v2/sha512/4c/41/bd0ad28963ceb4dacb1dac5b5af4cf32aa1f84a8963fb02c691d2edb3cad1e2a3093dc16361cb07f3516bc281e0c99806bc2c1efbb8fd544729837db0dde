{"code":"!function(t){var e={};function s(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,s),o.l=!0,o.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var o in t)s.d(i,o,function(e){return t[e]}.bind(null,o));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,\"a\",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p=\"\",s(s.s=6)}([function(t,e){t.exports=require(\"Diagnostics\")},function(t,e){t.exports=require(\"Reactive\")},function(t,e){t.exports=require(\"Scene\")},function(t,e){t.exports=require(\"Time\")},function(t,e){t.exports=require(\"TouchGestures\")},function(t,e){t.exports=require(\"Animation\")},function(t,e,s){\"use strict\";s.r(e);class i{constructor(t=[0,0,0,0,0,0,0,0,0]){this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t=new o){const e=this.elements;t.x=e[0],t.y=e[4],t.z=e[8]}vmult(t,e=new o){const s=this.elements,i=t.x,n=t.y,r=t.z;return e.x=s[0]*i+s[1]*n+s[2]*r,e.y=s[3]*i+s[4]*n+s[5]*r,e.z=s[6]*i+s[7]*n+s[8]*r,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e=new i){const{elements:s}=t;for(let t=0;t<3;t++)for(let i=0;i<3;i++){let o=0;for(let e=0;e<3;e++)o+=s[t+3*e]*this.elements[e+3*i];e.elements[t+3*i]=o}return e}scale(t,e=new i){const s=this.elements,o=e.elements;for(let e=0;3!==e;e++)o[3*e+0]=t.x*s[3*e+0],o[3*e+1]=t.y*s[3*e+1],o[3*e+2]=t.z*s[3*e+2];return e}solve(t,e=new o){const s=[];let i,n;for(i=0;i<12;i++)s.push(0);for(i=0;i<3;i++)for(n=0;n<3;n++)s[i+4*n]=this.elements[i+3*n];s[3]=t.x,s[7]=t.y,s[11]=t.z;let r=3;const a=r;let l;let h;do{if(i=a-r,0===s[i+4*i])for(n=i+1;n<a;n++)if(0!==s[i+4*n]){l=4;do{h=4-l,s[h+4*i]+=s[h+4*n]}while(--l);break}if(0!==s[i+4*i])for(n=i+1;n<a;n++){const t=s[i+4*n]/s[i+4*i];l=4;do{h=4-l,s[h+4*n]=h<=i?0:s[h+4*n]-s[h+4*i]*t}while(--l)}}while(--r);if(e.z=s[11]/s[10],e.y=(s[7]-s[6]*e.z)/s[5],e.x=(s[3]-s[2]*e.z-s[1]*e.y)/s[0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw\"Could not solve equation! Got x=[\"+e.toString()+\"], b=[\"+t.toString()+\"], A=[\"+this.toString()+\"]\";return e}e(t,e,s){if(void 0===s)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t=\"\";for(let e=0;e<9;e++)t+=this.elements[e]+\",\";return t}reverse(t=new i){const e=[];let s,o;for(s=0;s<18;s++)e.push(0);for(s=0;s<3;s++)for(o=0;o<3;o++)e[s+6*o]=this.elements[s+3*o];e[3]=1,e[9]=0,e[15]=0,e[4]=0,e[10]=1,e[16]=0,e[5]=0,e[11]=0,e[17]=1;let n=3;const r=n;let a;let l;do{if(s=r-n,0===e[s+6*s])for(o=s+1;o<r;o++)if(0!==e[s+6*o]){a=6;do{l=6-a,e[l+6*s]+=e[l+6*o]}while(--a);break}if(0!==e[s+6*s])for(o=s+1;o<r;o++){const t=e[s+6*o]/e[s+6*s];a=6;do{l=6-a,e[l+6*o]=l<=s?0:e[l+6*o]-e[l+6*s]*t}while(--a)}}while(--n);s=2;do{o=s-1;do{const t=e[s+6*o]/e[s+6*s];a=6;do{l=6-a,e[l+6*o]=e[l+6*o]-e[l+6*s]*t}while(--a)}while(o--)}while(--s);s=2;do{const t=1/e[s+6*s];a=6;do{l=6-a,e[l+6*s]=e[l+6*s]*t}while(--a)}while(s--);s=2;do{o=2;do{if(l=e[3+o+6*s],isNaN(l)||l===1/0)throw\"Could not reverse! A=[\"+this.toString()+\"]\";t.e(s,o,l)}while(o--)}while(s--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,i=t.z,o=t.w,n=e+e,r=s+s,a=i+i,l=e*n,h=e*r,c=e*a,u=s*r,d=s*a,p=i*a,y=o*n,f=o*r,m=o*a,v=this.elements;return v[0]=1-(u+p),v[1]=h-m,v[2]=c+f,v[3]=h+m,v[4]=1-(l+p),v[5]=d-y,v[6]=c-f,v[7]=d+y,v[8]=1-(l+u),this}transpose(t=new i){const e=t.elements,s=this.elements;for(let t=0;3!==t;t++)for(let i=0;3!==i;i++)e[3*t+i]=s[3*i+t];return t}}class o{constructor(t=0,e=0,s=0){this.x=t,this.y=e,this.z=s}cross(t,e=new o){const s=t.x,i=t.y,n=t.z,r=this.x,a=this.y,l=this.z;return e.x=a*n-l*i,e.y=l*s-r*n,e.z=r*i-a*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(!e)return new o(this.x+t.x,this.y+t.y,this.z+t.z);e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z}vsub(t,e){if(!e)return new o(this.x-t.x,this.y-t.y,this.z-t.z);e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z}crossmat(){return new i([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,i=Math.sqrt(t*t+e*e+s*s);if(i>0){const t=1/i;this.x*=t,this.y*=t,this.z*=t}else this.x=0,this.y=0,this.z=0;return i}unit(t=new o){const e=this.x,s=this.y,i=this.z;let n=Math.sqrt(e*e+s*s+i*i);return n>0?(n=1/n,t.x=e*n,t.y=s*n,t.z=i*n):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,i=this.z,o=t.x,n=t.y,r=t.z;return Math.sqrt((o-e)*(o-e)+(n-s)*(n-s)+(r-i)*(r-i))}distanceSquared(t){const e=this.x,s=this.y,i=this.z,o=t.x,n=t.y,r=t.z;return(o-e)*(o-e)+(n-s)*(n-s)+(r-i)*(r-i)}scale(t,e=new o){const s=this.x,i=this.y,n=this.z;return e.x=t*s,e.y=t*i,e.z=t*n,e}vmul(t,e=new o){return e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s=new o){return s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return 0===this.x&&0===this.y&&0===this.z}negate(t=new o){return t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const i=n,o=1/s;i.set(this.x*o,this.y*o,this.z*o);const a=r;Math.abs(i.x)<.9?(a.set(1,0,0),i.cross(a,t)):(a.set(0,1,0),i.cross(a,t)),i.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return this.x+\",\"+this.y+\",\"+this.z}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const i=this.x,o=this.y,n=this.z;s.x=i+(t.x-i)*e,s.y=o+(t.y-o)*e,s.z=n+(t.z-n)*e}almostEquals(t,e=1e-6){return!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t=1e-6){return!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(a),a.almostEquals(t,e)}clone(){return new o(this.x,this.y,this.z)}}o.ZERO=new o(0,0,0),o.UNIT_X=new o(1,0,0),o.UNIT_Y=new o(0,1,0),o.UNIT_Z=new o(0,0,1);const n=new o,r=new o,a=new o;class l{constructor(t={}){this.lowerBound=new o,this.upperBound=new o,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,i){const o=this.lowerBound,n=this.upperBound,r=s;o.copy(t[0]),r&&r.vmult(o,o),n.copy(o);for(let e=1;e<t.length;e++){let s=t[e];r&&(r.vmult(s,h),s=h),s.x>n.x&&(n.x=s.x),s.x<o.x&&(o.x=s.x),s.y>n.y&&(n.y=s.y),s.y<o.y&&(o.y=s.y),s.z>n.z&&(n.z=s.z),s.z<o.z&&(o.z=s.z)}return e&&(e.vadd(o,o),e.vadd(n,n)),i&&(o.x-=i,o.y-=i,o.z-=i,n.x+=i,n.y+=i,n.z+=i),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return(new l).copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,o=t.upperBound,n=i.x<=s.x&&s.x<=o.x||e.x<=o.x&&o.x<=s.x,r=i.y<=s.y&&s.y<=o.y||e.y<=o.y&&o.y<=s.y,a=i.z<=s.z&&s.z<=o.z||e.z<=o.z&&o.z<=s.z;return n&&r&&a}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,o=t.upperBound;return e.x<=i.x&&s.x>=o.x&&e.y<=i.y&&s.y>=o.y&&e.z<=i.z&&s.z>=o.z}getCorners(t,e,s,i,o,n,r,a){const l=this.lowerBound,h=this.upperBound;t.copy(l),e.set(h.x,l.y,l.z),s.set(h.x,h.y,l.z),i.set(l.x,h.y,h.z),o.set(h.x,l.y,h.z),n.set(l.x,h.y,l.z),r.set(l.x,l.y,h.z),a.copy(h)}toLocalFrame(t,e){const s=c,i=s[0],o=s[1],n=s[2],r=s[3],a=s[4],l=s[5],h=s[6],u=s[7];this.getCorners(i,o,n,r,a,l,h,u);for(let e=0;8!==e;e++){const i=s[e];t.pointToLocal(i,i)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=c,i=s[0],o=s[1],n=s[2],r=s[3],a=s[4],l=s[5],h=s[6],u=s[7];this.getCorners(i,o,n,r,a,l,h,u);for(let e=0;8!==e;e++){const i=s[e];t.pointToWorld(i,i)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,i=1/e.x,o=1/e.y,n=1/e.z,r=(this.lowerBound.x-s.x)*i,a=(this.upperBound.x-s.x)*i,l=(this.lowerBound.y-s.y)*o,h=(this.upperBound.y-s.y)*o,c=(this.lowerBound.z-s.z)*n,u=(this.upperBound.z-s.z)*n,d=Math.max(Math.max(Math.min(r,a),Math.min(l,h)),Math.min(c,u)),p=Math.min(Math.min(Math.max(r,a),Math.max(l,h)),Math.max(c,u));return!(p<0)&&!(d>p)}}const h=new o,c=[new o,new o,new o,new o,new o,new o,new o,new o];class u{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:i}=e;if(i>s){const t=i;i=s,s=t}return this.matrix[(s*(s+1)>>1)+i-1]}set(t,e,s){let{index:i}=t,{index:o}=e;if(o>i){const t=o;o=i,i=t}this.matrix[(i*(i+1)>>1)+o-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class d{constructor(){}addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const s=this._listeners;return void 0===s[t]&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(void 0===this._listeners)return!1;const s=this._listeners;return!(void 0===s[t]||!s[t].includes(e))}hasAnyEventListener(t){if(void 0===this._listeners)return!1;return void 0!==this._listeners[t]}removeEventListener(t,e){if(void 0===this._listeners)return this;const s=this._listeners;if(void 0===s[t])return this;const i=s[t].indexOf(e);return-1!==i&&s[t].splice(i,1),this}dispatchEvent(t){if(void 0===this._listeners)return this;const e=this._listeners[t.type];if(void 0!==e){t.target=this;for(let s=0,i=e.length;s<i;s++)e[s].call(this,t)}return this}}class p{constructor(t=0,e=0,s=0,i=1){this.x=t,this.y=e,this.z=s,this.w=i}set(t,e,s,i){return this.x=t,this.y=e,this.z=s,this.w=i,this}toString(){return this.x+\",\"+this.y+\",\"+this.z+\",\"+this.w}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(.5*e);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(.5*e),this}toAxisAngle(t=new o){this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const e=y,s=f;t.tangents(e,s),this.setFromAxisAngle(e,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e=new p){const s=this.x,i=this.y,o=this.z,n=this.w,r=t.x,a=t.y,l=t.z,h=t.w;return e.x=s*h+n*r+i*l-o*a,e.y=i*h+n*a+o*r-s*l,e.z=o*h+n*l+s*a-i*r,e.w=n*h-s*r-i*a-o*l,e}inverse(t=new p){const e=this.x,s=this.y,i=this.z,o=this.w;this.conjugate(t);const n=1/(e*e+s*s+i*i+o*o);return t.x*=n,t.y*=n,t.z*=n,t.w*=n,t}conjugate(t=new p){return t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e=new o){const s=t.x,i=t.y,n=t.z,r=this.x,a=this.y,l=this.z,h=this.w,c=h*s+a*n-l*i,u=h*i+l*s-r*n,d=h*n+r*i-a*s,p=-r*s-a*i-l*n;return e.x=c*h+p*-r+u*-l-d*-a,e.y=u*h+p*-a+d*-r-c*-l,e.z=d*h+p*-l+c*-a-u*-r,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e=\"YZX\"){let s,i,o;const n=this.x,r=this.y,a=this.z,l=this.w;switch(e){case\"YZX\":const t=n*r+a*l;if(t>.499&&(s=2*Math.atan2(n,l),i=Math.PI/2,o=0),t<-.499&&(s=-2*Math.atan2(n,l),i=-Math.PI/2,o=0),void 0===s){const e=n*n,h=r*r,c=a*a;s=Math.atan2(2*r*l-2*n*a,1-2*h-2*c),i=Math.asin(2*t),o=Math.atan2(2*n*l-2*r*a,1-2*e-2*c)}break;default:throw new Error(\"Euler order \"+e+\" not supported yet.\")}t.y=s,t.z=i,t.x=o}setFromEuler(t,e,s,i=\"XYZ\"){const o=Math.cos(t/2),n=Math.cos(e/2),r=Math.cos(s/2),a=Math.sin(t/2),l=Math.sin(e/2),h=Math.sin(s/2);return\"XYZ\"===i?(this.x=a*n*r+o*l*h,this.y=o*l*r-a*n*h,this.z=o*n*h+a*l*r,this.w=o*n*r-a*l*h):\"YXZ\"===i?(this.x=a*n*r+o*l*h,this.y=o*l*r-a*n*h,this.z=o*n*h-a*l*r,this.w=o*n*r+a*l*h):\"ZXY\"===i?(this.x=a*n*r-o*l*h,this.y=o*l*r+a*n*h,this.z=o*n*h+a*l*r,this.w=o*n*r-a*l*h):\"ZYX\"===i?(this.x=a*n*r-o*l*h,this.y=o*l*r+a*n*h,this.z=o*n*h-a*l*r,this.w=o*n*r+a*l*h):\"YZX\"===i?(this.x=a*n*r+o*l*h,this.y=o*l*r+a*n*h,this.z=o*n*h-a*l*r,this.w=o*n*r-a*l*h):\"XZY\"===i&&(this.x=a*n*r-o*l*h,this.y=o*l*r-a*n*h,this.z=o*n*h+a*l*r,this.w=o*n*r+a*l*h),this}clone(){return new p(this.x,this.y,this.z,this.w)}slerp(t,e,s=new p){const i=this.x,o=this.y,n=this.z,r=this.w;let a,l,h,c,u,d=t.x,y=t.y,f=t.z,m=t.w;return l=i*d+o*y+n*f+r*m,l<0&&(l=-l,d=-d,y=-y,f=-f,m=-m),1-l>1e-6?(a=Math.acos(l),h=Math.sin(a),c=Math.sin((1-e)*a)/h,u=Math.sin(e*a)/h):(c=1-e,u=e),s.x=c*i+u*d,s.y=c*o+u*y,s.z=c*n+u*f,s.w=c*r+u*m,s}integrate(t,e,s,i=new p){const o=t.x*s.x,n=t.y*s.y,r=t.z*s.z,a=this.x,l=this.y,h=this.z,c=this.w,u=.5*e;return i.x+=u*(o*c+n*h-r*l),i.y+=u*(n*c+r*a-o*h),i.z+=u*(r*c+o*l-n*a),i.w+=u*(-o*a-n*l-r*h),i}}const y=new o,f=new o;class m{constructor(t={}){this.id=m.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=!t.collisionResponse||t.collisionResponse,this.collisionFilterGroup=void 0!==t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask=void 0!==t.collisionFilterMask?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw\"computeBoundingSphereRadius() not implemented for shape type \"+this.type}volume(){throw\"volume() not implemented for shape type \"+this.type}calculateLocalInertia(t,e){throw\"calculateLocalInertia() not implemented for shape type \"+this.type}calculateWorldAABB(t,e,s,i){throw\"calculateWorldAABB() not implemented for shape type \"+this.type}}m.idCounter=0,m.types={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class v{constructor(t={}){this.position=new o,this.quaternion=new p,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return v.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return v.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e=new o){return this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,i=new o){return s.vsub(t,i),e.conjugate(w),w.vmult(i,i),i}static pointToWorldFrame(t,e,s,i=new o){return e.vmult(s,i),i.vadd(t,i),i}static vectorToWorldFrame(t,e,s=new o){return t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,i=new o){return e.w*=-1,e.vmult(s,i),e.w*=-1,i}}const w=new p;class g extends m{constructor(t={}){const{vertices:e=[],faces:s=[],normals:i=[],axes:o,boundingSphereRadius:n}=t;super({type:m.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=i,0===this.faceNormals.length&&this.computeNormals(),n?this.boundingSphereRadius=n:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=o?o.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const i=new o;for(let o=0;o!==t.length;o++){const n=t[o],r=n.length;for(let t=0;t!==r;t++){const o=(t+1)%r;e[n[t]].vsub(e[n[o]],i),i.normalize();let a=!1;for(let t=0;t!==s.length;t++)if(s[t].almostEquals(i)||s[t].almostEquals(i)){a=!0;break}a||s.push(i.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let e=0;e<this.faces[t].length;e++)if(!this.vertices[this.faces[t][e]])throw new Error(\"Vertex \"+this.faces[t][e]+\" not found!\");const e=this.faceNormals[t]||new o;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(\".faceNormals[\"+t+\"] = Vec3(\"+e.toString()+\") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.\");for(let e=0;e<this.faces[t].length;e++)console.warn(\".vertices[\"+this.faces[t][e]+\"] = Vec3(\"+this.vertices[this.faces[t][e]].toString()+\")\")}}}getFaceNormal(t,e){const s=this.faces[t],i=this.vertices[s[0]],o=this.vertices[s[1]],n=this.vertices[s[2]];g.computeNormal(i,o,n,e)}clipAgainstHull(t,e,s,i,n,r,a,l,h){const c=new o;let u=-1,d=-Number.MAX_VALUE;for(let t=0;t<s.faces.length;t++){c.copy(s.faceNormals[t]),n.vmult(c,c);const e=c.dot(r);e>d&&(d=e,u=t)}const p=[];for(let t=0;t<s.faces[u].length;t++){const e=s.vertices[s.faces[u][t]],r=new o;r.copy(e),n.vmult(r,r),i.vadd(r,r),p.push(r)}u>=0&&this.clipFaceAgainstHull(r,t,e,p,a,l,h)}findSeparatingAxis(t,e,s,i,n,r,a,l){const h=new o,c=new o,u=new o,d=new o,p=new o,y=new o;let f=Number.MAX_VALUE;const m=this;if(m.uniqueAxes)for(let o=0;o!==m.uniqueAxes.length;o++){s.vmult(m.uniqueAxes[o],h);const a=m.testSepAxis(h,t,e,s,i,n);if(!1===a)return!1;a<f&&(f=a,r.copy(h))}else{const o=a?a.length:m.faces.length;for(let l=0;l<o;l++){const o=a?a[l]:l;h.copy(m.faceNormals[o]),s.vmult(h,h);const c=m.testSepAxis(h,t,e,s,i,n);if(!1===c)return!1;c<f&&(f=c,r.copy(h))}}if(t.uniqueAxes)for(let o=0;o!==t.uniqueAxes.length;o++){n.vmult(t.uniqueAxes[o],c);const a=m.testSepAxis(c,t,e,s,i,n);if(!1===a)return!1;a<f&&(f=a,r.copy(c))}else{const o=l?l.length:t.faces.length;for(let a=0;a<o;a++){const o=l?l[a]:a;c.copy(t.faceNormals[o]),n.vmult(c,c);const h=m.testSepAxis(c,t,e,s,i,n);if(!1===h)return!1;h<f&&(f=h,r.copy(c))}}for(let o=0;o!==m.uniqueEdges.length;o++){s.vmult(m.uniqueEdges[o],d);for(let o=0;o!==t.uniqueEdges.length;o++)if(n.vmult(t.uniqueEdges[o],p),d.cross(p,y),!y.almostZero()){y.normalize();const o=m.testSepAxis(y,t,e,s,i,n);if(!1===o)return!1;o<f&&(f=o,r.copy(y))}}return i.vsub(e,u),u.dot(r)>0&&r.negate(r),!0}testSepAxis(t,e,s,i,o,n){g.project(this,t,s,i,b),g.project(e,t,o,n,x);const r=b[0],a=b[1],l=x[0],h=x[1];if(r<h||l<a)return!1;const c=r-h,u=l-a;return c<u?c:u}calculateLocalInertia(t,e){const s=new o,i=new o;this.computeLocalAABB(i,s);const n=s.x-i.x,r=s.y-i.y,a=s.z-i.z;e.x=1/12*t*(2*r*2*r+2*a*2*a),e.y=1/12*t*(2*n*2*n+2*a*2*a),e.z=1/12*t*(2*r*2*r+2*n*2*n)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],i=this.vertices[e[0]];return-s.dot(i)}clipFaceAgainstHull(t,e,s,i,n,r,a){const l=new o,h=new o,c=new o,u=new o,d=new o,p=new o,y=new o,f=new o,m=this,v=i,w=[];let g=-1,b=Number.MAX_VALUE;for(let e=0;e<m.faces.length;e++){l.copy(m.faceNormals[e]),s.vmult(l,l);const i=l.dot(t);i<b&&(b=i,g=e)}if(g<0)return;const x=m.faces[g];x.connectedFaces=[];for(let t=0;t<m.faces.length;t++)for(let e=0;e<m.faces[t].length;e++)-1!==x.indexOf(m.faces[t][e])&&t!==g&&-1===x.connectedFaces.indexOf(t)&&x.connectedFaces.push(t);const z=x.length;for(let t=0;t<z;t++){const i=m.vertices[x[t]],o=m.vertices[x[(t+1)%z]];i.vsub(o,h),c.copy(h),s.vmult(c,c),e.vadd(c,c),u.copy(this.faceNormals[g]),s.vmult(u,u),e.vadd(u,u),c.cross(u,d),d.negate(d),p.copy(i),s.vmult(p,p),e.vadd(p,p);const n=x.connectedFaces[t];y.copy(this.faceNormals[n]);const r=this.getPlaneConstantOfFace(n);f.copy(y),s.vmult(f,f);const a=r-f.dot(e);for(this.clipFaceAgainstPlane(v,w,f,a);v.length;)v.shift();for(;w.length;)v.push(w.shift())}y.copy(this.faceNormals[g]);const E=this.getPlaneConstantOfFace(g);f.copy(y),s.vmult(f,f);const B=E-f.dot(e);for(let t=0;t<v.length;t++){let e=f.dot(v[t])+B;if(e<=n&&(console.log(\"clamped: depth=\"+e+\" to minDist=\"+n),e=n),e<=r){const s=v[t];if(e<=1e-6){const t={point:s,normal:f,depth:e};a.push(t)}}}}clipFaceAgainstPlane(t,e,s,i){let n,r;const a=t.length;if(a<2)return e;let l=t[t.length-1],h=t[0];n=s.dot(l)+i;for(let c=0;c<a;c++){if(h=t[c],r=s.dot(h)+i,n<0)if(r<0){const t=new o;t.copy(h),e.push(t)}else{const t=new o;l.lerp(h,n/(n-r),t),e.push(t)}else if(r<0){const t=new o;l.lerp(h,n/(n-r),t),e.push(t),e.push(h)}l=h,n=r}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new o);const s=this.vertices,i=this.worldVertices;for(let o=0;o!==this.vertices.length;o++)e.vmult(s[o],i[o]),t.vadd(i[o],i[o]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let i=0;i<this.vertices.length;i++){const o=s[i];o.x<t.x?t.x=o.x:o.x>e.x&&(e.x=o.x),o.y<t.y?t.y=o.y:o.y>e.y&&(e.y=o.y),o.z<t.z?t.z=o.z:o.z>e.z&&(e.z=o.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new o);const s=this.faceNormals,i=this.worldFaceNormals;for(let o=0;o!==e;o++)t.vmult(s[o],i[o]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const i=e[s].lengthSquared();i>t&&(t=i)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,i){const n=this.vertices;let r,a,l,h,c,u,d=new o;for(let s=0;s<n.length;s++){d.copy(n[s]),e.vmult(d,d),t.vadd(d,d);const i=d;(void 0===r||i.x<r)&&(r=i.x),(void 0===h||i.x>h)&&(h=i.x),(void 0===a||i.y<a)&&(a=i.y),(void 0===c||i.y>c)&&(c=i.y),(void 0===l||i.z<l)&&(l=i.z),(void 0===u||i.z>u)&&(u=i.z)}s.set(r,a,l),i.set(h,c,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t=new o){const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,i=this.vertices;if(e){for(let t=0;t<s;t++){const s=i[t];e.vmult(s,s)}for(let t=0;t<this.faceNormals.length;t++){const s=this.faceNormals[t];e.vmult(s,s)}}if(t)for(let e=0;e<s;e++){const s=i[e];s.vadd(t,s)}}pointIsInside(t){const e=this.vertices,s=this.faces,i=this.faceNormals,n=new o;this.getAveragePointLocal(n);for(let r=0;r<this.faces.length;r++){let a=i[r];const l=e[s[r][0]],h=new o;t.vsub(l,h);const c=a.dot(h),u=new o;n.vsub(l,u);const d=a.dot(u);if(c<0&&d>0||c>0&&d<0)return!1}return-1}}g.computeNormal=(t,e,s,i)=>{const n=new o,r=new o;e.vsub(t,r),s.vsub(e,n),n.cross(r,i),i.isZero()||i.normalize()};const b=[],x=[];g.project=(t,e,s,i,n)=>{const r=t.vertices.length,a=new o;let l=0,h=0;const c=new o,u=t.vertices;c.setZero(),v.vectorToLocalFrame(s,i,e,a),v.pointToLocalFrame(s,i,c,c);const d=c.dot(a);h=l=u[0].dot(a);for(let t=1;t<r;t++){const e=u[t].dot(a);e>l&&(l=e),e<h&&(h=e)}if(h-=d,l-=d,h>l){const t=h;h=l,l=t}n[0]=l,n[1]=h};class z extends m{constructor(t){super({type:m.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,i=o,n=[new i(-t,-e,-s),new i(t,-e,-s),new i(t,e,-s),new i(-t,e,-s),new i(-t,-e,s),new i(t,-e,s),new i(t,e,s),new i(-t,e,s)],r=[new i(0,0,1),new i(0,1,0),new i(1,0,0)],a=new g({vertices:n,faces:[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],axes:r});this.convexPolyhedronRepresentation=a,a.material=this.material}calculateLocalInertia(t,e=new o){return z.calculateInertia(this.halfExtents,t,e),e}getSideNormals(t,e){const s=t,i=this.halfExtents;if(s[0].set(i.x,0,0),s[1].set(0,i.y,0),s[2].set(0,0,i.z),s[3].set(-i.x,0,0),s[4].set(0,-i.y,0),s[5].set(0,0,-i.z),void 0!==e)for(let t=0;t!==s.length;t++)e.vmult(s[t],s[t]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const i=this.halfExtents,o=[[i.x,i.y,i.z],[-i.x,i.y,i.z],[-i.x,-i.y,i.z],[-i.x,-i.y,-i.z],[i.x,-i.y,-i.z],[i.x,i.y,-i.z],[-i.x,i.y,-i.z],[i.x,-i.y,i.z]];for(let i=0;i<o.length;i++)E.set(o[i][0],o[i][1],o[i][2]),e.vmult(E,E),t.vadd(E,E),s(E.x,E.y,E.z)}calculateWorldAABB(t,e,s,i){const o=this.halfExtents;B[0].set(o.x,o.y,o.z),B[1].set(-o.x,o.y,o.z),B[2].set(-o.x,-o.y,o.z),B[3].set(-o.x,-o.y,-o.z),B[4].set(o.x,-o.y,-o.z),B[5].set(o.x,o.y,-o.z),B[6].set(-o.x,o.y,-o.z),B[7].set(o.x,-o.y,o.z);const n=B[0];e.vmult(n,n),t.vadd(n,n),i.copy(n),s.copy(n);for(let o=1;o<8;o++){const n=B[o];e.vmult(n,n),t.vadd(n,n);const r=n.x,a=n.y,l=n.z;r>i.x&&(i.x=r),a>i.y&&(i.y=a),l>i.z&&(i.z=l),r<s.x&&(s.x=r),a<s.y&&(s.y=a),l<s.z&&(s.z=l)}}}z.calculateInertia=(t,e,s)=>{const i=t;s.x=1/12*e*(2*i.y*2*i.y+2*i.z*2*i.z),s.y=1/12*e*(2*i.x*2*i.x+2*i.z*2*i.z),s.z=1/12*e*(2*i.y*2*i.y+2*i.x*2*i.x)};const E=new o,B=[new o,new o,new o,new o,new o,new o,new o,new o],S=0,A=1,F=2;class M extends d{constructor(t={}){super(),this.id=M.idCounter++,this.index=-1,this.world=null,this.preStep=null,this.postStep=null,this.vlambda=new o,this.collisionFilterGroup=\"number\"==typeof t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask=\"number\"==typeof t.collisionFilterMask?t.collisionFilterMask:-1,this.collisionResponse=\"boolean\"!=typeof t.collisionResponse||t.collisionResponse,this.position=new o,this.previousPosition=new o,this.interpolatedPosition=new o,this.initPosition=new o,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new o,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new o,this.force=new o;const e=\"number\"==typeof t.mass?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=\"number\"==typeof t.linearDamping?t.linearDamping:.01,this.type=e<=0?M.STATIC:M.DYNAMIC,typeof t.type==typeof M.STATIC&&(this.type=t.type),this.allowSleep=void 0===t.allowSleep||t.allowSleep,this.sleepState=0,this.sleepSpeedLimit=void 0!==t.sleepSpeedLimit?t.sleepSpeedLimit:.1,this.sleepTimeLimit=void 0!==t.sleepTimeLimit?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new o,this.quaternion=new p,this.initQuaternion=new p,this.previousQuaternion=new p,this.interpolatedQuaternion=new p,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new o,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new o,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new o,this.invInertia=new o,this.invInertiaWorld=new i,this.invMassSolve=0,this.invInertiaSolve=new o,this.invInertiaWorldSolve=new i,this.fixedRotation=void 0!==t.fixedRotation&&t.fixedRotation,this.angularDamping=void 0!==t.angularDamping?t.angularDamping:.01,this.linearFactor=new o(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new o(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new l,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new o,t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=0,this.wakeUpAfterNarrowphase=!1,t===M.SLEEPING&&this.dispatchEvent(M.wakeupEvent)}sleep(){this.sleepState=M.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),i=this.sleepSpeedLimit**2;e===M.AWAKE&&s<i?(this.sleepState=M.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(M.sleepyEvent)):e===M.SLEEPY&&s>i?this.wakeUp():e===M.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(M.sleepEvent))}}updateSolveMassProperties(){this.sleepState===M.SLEEPING||this.type===M.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e=new o){return t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e=new o){return this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e=new o){return this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e=new o){return this.quaternion.vmult(t,e),e}addShape(t,e,s){const i=new o,n=new p;return e&&i.copy(e),s&&n.copy(s),this.shapes.push(t),this.shapeOffsets.push(i),this.shapeOrientations.push(n),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let i=0;for(let o=0;o!==s;o++){const s=t[o];s.updateBoundingSphereRadius();const n=e[o].length(),r=s.boundingSphereRadius;n+r>i&&(i=n+r)}this.boundingRadius=i}computeAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,i=t.length,o=C,n=q,r=this.quaternion,a=this.aabb,l=T;for(let h=0;h!==i;h++){const i=t[h];r.vmult(e[h],o),o.vadd(this.position,o),r.mult(s[h],n),i.calculateWorldAABB(o,n,l.lowerBound,l.upperBound),0===h?a.copy(l):a.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(e.x!==e.y||e.y!==e.z||t){const t=P,s=R;t.setRotationFromQuaternion(this.quaternion),t.transpose(s),t.scale(e,t),t.mmult(s,this.invInertiaWorld)}else;}applyForce(t,e){if(this.type!==M.DYNAMIC)return;const s=N;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(this.type!==M.DYNAMIC)return;const s=j,i=I;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyForce(s,i)}applyImpulse(t,e){if(this.type!==M.DYNAMIC)return;const s=e,i=L;i.copy(t),i.scale(this.invMass,i),this.velocity.vadd(i,this.velocity);const o=O;s.cross(t,o),this.invInertiaWorld.vmult(o,o),this.angularVelocity.vadd(o,this.angularVelocity)}applyLocalImpulse(t,e){if(this.type!==M.DYNAMIC)return;const s=k,i=V;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyImpulse(s,i)}updateMassProperties(){const t=W;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.computeAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),z.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new o;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),this.type!==M.DYNAMIC&&this.type!==M.KINEMATIC||this.sleepState===M.SLEEPING)return;const i=this.velocity,o=this.angularVelocity,n=this.position,r=this.force,a=this.torque,l=this.quaternion,h=this.invMass,c=this.invInertiaWorld,u=this.linearFactor,d=h*t;i.x+=r.x*d*u.x,i.y+=r.y*d*u.y,i.z+=r.z*d*u.z;const p=c.elements,y=this.angularFactor,f=a.x*y.x,m=a.y*y.y,v=a.z*y.z;o.x+=t*(p[0]*f+p[1]*m+p[2]*v),o.y+=t*(p[3]*f+p[4]*m+p[5]*v),o.z+=t*(p[6]*f+p[7]*m+p[8]*v),n.x+=i.x*t,n.y+=i.y*t,n.z+=i.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(s?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}M.COLLIDE_EVENT_NAME=\"collide\",M.DYNAMIC=1,M.STATIC=2,M.KINEMATIC=4,M.AWAKE=S,M.SLEEPY=A,M.SLEEPING=F,M.idCounter=0,M.wakeupEvent={type:\"wakeup\"},M.sleepyEvent={type:\"sleepy\"},M.sleepEvent={type:\"sleep\"};const C=new o,q=new p,T=new l,P=new i,R=new i,N=new o,j=new o,I=new o,L=new o,O=new o,k=new o,V=new o,W=new o;class H{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error(\"collisionPairs not implemented for this BroadPhase class!\")}needBroadphaseCollision(t,e){return 0!=(t.collisionFilterGroup&e.collisionFilterMask)&&0!=(e.collisionFilterGroup&t.collisionFilterMask)&&(0==(t.type&M.STATIC)&&t.sleepState!==M.SLEEPING||0==(e.type&M.STATIC)&&e.sleepState!==M.SLEEPING)}intersectionTest(t,e,s,i){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,i):this.doBoundingSphereBroadphase(t,e,s,i)}doBoundingSphereBroadphase(t,e,s,i){const o=_;e.position.vsub(t.position,o);const n=(t.boundingRadius+e.boundingRadius)**2;o.lengthSquared()<n&&(s.push(t),i.push(e))}doBoundingBoxBroadphase(t,e,s,i){t.aabbNeedsUpdate&&t.computeAABB(),e.aabbNeedsUpdate&&e.computeAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),i.push(e))}makePairsUnique(t,e){const s=D,i=Y,o=G,n=t.length;for(let s=0;s!==n;s++)i[s]=t[s],o[s]=e[s];t.length=0,e.length=0;for(let t=0;t!==n;t++){const e=i[t].id,n=o[t].id,r=e<n?e+\",\"+n:n+\",\"+e;s[r]=t,s.keys.push(r)}for(let n=0;n!==s.keys.length;n++){const n=s.keys.pop(),r=s[n];t.push(i[r]),e.push(o[r]),delete s[n]}}setWorld(t){}aabbQuery(t,e,s){return console.warn(\".aabbQuery is not implemented in this Broadphase subclass.\"),[]}}const _=new o,D={keys:[]},Y=[],G=[];H.boundingSphereCheck=(t,e)=>{const s=new o;t.position.vsub(e.position,s);const i=t.shapes[0],n=e.shapes[0];return Math.pow(i.boundingSphereRadius+n.boundingSphereRadius,2)>s.lengthSquared()};new o;class U extends H{constructor(){super()}collisionPairs(t,e,s){const i=t.bodies,o=i.length;let n,r;for(let t=0;t!==o;t++)for(let o=0;o!==t;o++)n=i[t],r=i[o],this.needBroadphaseCollision(n,r)&&this.intersectionTest(n,r,e,s)}aabbQuery(t,e,s=[]){for(let i=0;i<t.bodies.length;i++){const o=t.bodies[i];o.aabbNeedsUpdate&&o.computeAABB(),o.aabb.overlaps(e)&&s.push(o)}return s}}class X{constructor(){this.rayFromWorld=new o,this.rayToWorld=new o,this.hitNormalWorld=new o,this.hitPointWorld=new o,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,i,o,n,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(i),this.shape=o,this.body=n,this.distance=r}}class Z{constructor(t=new o,e=new o){this.from=t.clone(),this.to=e.clone(),this.direction=new o,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=Z.ANY,this.result=new X,this.hasHit=!1,this.callback=t=>{}}intersectWorld(t,e){return this.mode=e.mode||Z.ANY,this.result=e.result||new X,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=void 0!==e.collisionFilterMask?e.collisionFilterMask:-1,this.collisionFilterGroup=void 0!==e.collisionFilterGroup?e.collisionFilterGroup:-1,this.checkCollisionResponse=void 0===e.checkCollisionResponse||e.checkCollisionResponse,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(K),Q.length=0,t.broadphase.aabbQuery(t,K,Q),this.intersectBodies(Q),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse)return;if(0==(this.collisionFilterGroup&t.collisionFilterMask)||0==(t.collisionFilterGroup&this.collisionFilterMask))return;const i=et,o=st;for(let e=0,n=t.shapes.length;e<n;e++){const n=t.shapes[e];if((!s||n.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[e],o),t.quaternion.vmult(t.shapeOffsets[e],i),i.vadd(t.position,i),this.intersectShape(n,o,i,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let e=0,s=t.length;!this.result.shouldStop&&e<s;e++)this.intersectBody(t[e])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,i){if(function(t,e,s){s.vsub(t,Et);const i=Et.dot(e);e.scale(i,Bt),Bt.vadd(t,Bt);return s.distanceTo(Bt)}(this.from,this.direction,s)>t.boundingSphereRadius)return;const o=this[t.type];o&&o.call(this,t,e,s,i,t)}_intersectBox(t,e,s,i,o){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,i,o)}_intersectPlane(t,e,s,i,n){const r=this.from,a=this.to,l=this.direction,h=new o(0,0,1);e.vmult(h,h);const c=new o;r.vsub(s,c);const u=c.dot(h);a.vsub(s,c);if(u*c.dot(h)>0)return;if(r.distanceTo(a)<u)return;const d=h.dot(l);if(Math.abs(d)<this.precision)return;const p=new o,y=new o,f=new o;r.vsub(s,p);const m=-h.dot(p)/d;l.scale(m,y),r.vadd(y,f),this.reportIntersection(h,f,n,i,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,i=this.to,o=this.from;e.x=Math.min(i.x,o.x),e.y=Math.min(i.y,o.y),e.z=Math.min(i.z,o.z),s.x=Math.max(i.x,o.x),s.y=Math.max(i.y,o.y),s.z=Math.max(i.z,o.z)}_intersectHeightfield(t,e,s,i,o){t.data,t.elementSize;const n=ht;n.from.copy(this.from),n.to.copy(this.to),v.pointToLocalFrame(s,e,n.from,n.from),v.pointToLocalFrame(s,e,n.to,n.to),n.updateDirection();const r=ct;let a,h,c,u;a=h=0,c=u=t.data.length-1;const d=new l;n.getAABB(d),t.getIndexOfPosition(d.lowerBound.x,d.lowerBound.y,r,!0),a=Math.max(a,r[0]),h=Math.max(h,r[1]),t.getIndexOfPosition(d.upperBound.x,d.upperBound.y,r,!0),c=Math.min(c,r[0]+1),u=Math.min(u,r[1]+1);for(let r=a;r<c;r++)for(let a=h;a<u;a++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(r,a,d),d.overlapsRay(n)){if(t.getConvexTrianglePillar(r,a,!1),v.pointToWorldFrame(s,e,t.pillarOffset,lt),this._intersectConvex(t.pillarConvex,e,lt,i,o,at),this.result.shouldStop)return;t.getConvexTrianglePillar(r,a,!0),v.pointToWorldFrame(s,e,t.pillarOffset,lt),this._intersectConvex(t.pillarConvex,e,lt,i,o,at)}}}_intersectSphere(t,e,s,i,o){const n=this.from,r=this.to,a=t.radius,l=(r.x-n.x)**2+(r.y-n.y)**2+(r.z-n.z)**2,h=2*((r.x-n.x)*(n.x-s.x)+(r.y-n.y)*(n.y-s.y)+(r.z-n.z)*(n.z-s.z)),c=h**2-4*l*((n.x-s.x)**2+(n.y-s.y)**2+(n.z-s.z)**2-a**2),u=ut,d=dt;if(!(c<0))if(0===c)n.lerp(r,c,u),u.vsub(s,d),d.normalize(),this.reportIntersection(d,u,o,i,-1);else{const t=(-h-Math.sqrt(c))/(2*l),e=(-h+Math.sqrt(c))/(2*l);if(t>=0&&t<=1&&(n.lerp(r,t,u),u.vsub(s,d),d.normalize(),this.reportIntersection(d,u,o,i,-1)),this.result.shouldStop)return;e>=0&&e<=1&&(n.lerp(r,e,u),u.vsub(s,d),d.normalize(),this.reportIntersection(d,u,o,i,-1))}}_intersectConvex(t,e,s,i,o,n){const r=pt,a=yt,l=n&&n.faceList||null,h=t.faces,c=t.vertices,u=t.faceNormals,d=this.direction,p=this.from,y=this.to,f=p.distanceTo(y),m=l?l.length:h.length,v=this.result;for(let t=0;!v.shouldStop&&t<m;t++){const n=l?l[t]:t,y=h[n],m=u[n],w=e,g=s;a.copy(c[y[0]]),w.vmult(a,a),a.vadd(g,a),a.vsub(p,a),w.vmult(m,r);const b=d.dot(r);if(Math.abs(b)<this.precision)continue;const x=r.dot(a)/b;if(!(x<0)){d.scale(x,it),it.vadd(p,it),ot.copy(c[y[0]]),w.vmult(ot,ot),g.vadd(ot,ot);for(let t=1;!v.shouldStop&&t<y.length-1;t++){nt.copy(c[y[t]]),rt.copy(c[y[t+1]]),w.vmult(nt,nt),w.vmult(rt,rt),g.vadd(nt,nt),g.vadd(rt,rt);const e=it.distanceTo(p);!tt(it,ot,nt,rt)&&!tt(it,nt,ot,rt)||e>f||this.reportIntersection(r,it,o,i,n)}}}}_intersectTrimesh(t,e,s,i,o,n){const r=ft,a=xt,l=zt,h=yt,c=mt,u=vt,d=wt,p=bt,y=gt,f=(n&&n.faceList,t.indices),m=(t.vertices,this.from),w=this.to,g=this.direction;l.position.copy(s),l.quaternion.copy(e),v.vectorToLocalFrame(s,e,g,c),v.pointToLocalFrame(s,e,m,u),v.pointToLocalFrame(s,e,w,d),d.x*=t.scale.x,d.y*=t.scale.y,d.z*=t.scale.z,u.x*=t.scale.x,u.y*=t.scale.y,u.z*=t.scale.z,d.vsub(u,c),c.normalize();const b=u.distanceSquared(d);t.tree.rayQuery(this,l,a);for(let n=0,l=a.length;!this.result.shouldStop&&n!==l;n++){const l=a[n];t.getNormal(l,r),t.getVertex(f[3*l],ot),ot.vsub(u,h);const d=c.dot(r),m=r.dot(h)/d;if(m<0)continue;c.scale(m,it),it.vadd(u,it),t.getVertex(f[3*l+1],nt),t.getVertex(f[3*l+2],rt);const w=it.distanceSquared(u);!tt(it,nt,ot,rt)&&!tt(it,ot,nt,rt)||w>b||(v.vectorToWorldFrame(e,r,y),v.pointToWorldFrame(s,e,it,p),this.reportIntersection(y,p,o,i,l))}a.length=0}reportIntersection(t,e,s,i,o){const n=this.from,r=this.to,a=n.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex=void 0!==o?o:-1,this.mode){case Z.ALL:this.hasHit=!0,l.set(n,r,t,e,s,i,a),l.hasHit=!0,this.callback(l);break;case Z.CLOSEST:(a<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(n,r,t,e,s,i,a));break;case Z.ANY:this.hasHit=!0,l.hasHit=!0,l.set(n,r,t,e,s,i,a),l.shouldStop=!0}}}Z.CLOSEST=1,Z.ANY=2,Z.ALL=4;const K=new l,Q=[],J=new o,$=new o;function tt(t,e,s,i){i.vsub(e,Et),s.vsub(e,J),t.vsub(e,$);const o=Et.dot(Et),n=Et.dot(J),r=Et.dot($),a=J.dot(J),l=J.dot($);let h,c;return(h=a*r-n*l)>=0&&(c=o*l-n*r)>=0&&h+c<o*a-n*n}Z.pointInTriangle=tt;const et=new o,st=new p,it=new o,ot=new o,nt=new o,rt=new o;Z.prototype[m.types.BOX]=Z.prototype._intersectBox,Z.prototype[m.types.PLANE]=Z.prototype._intersectPlane;const at={faceList:[0]},lt=new o,ht=new Z,ct=[];Z.prototype[m.types.HEIGHTFIELD]=Z.prototype._intersectHeightfield;const ut=new o,dt=new o;Z.prototype[m.types.SPHERE]=Z.prototype._intersectSphere;const pt=new o,yt=new o;Z.prototype[m.types.CONVEXPOLYHEDRON]=Z.prototype._intersectConvex;const ft=new o,mt=new o,vt=new o,wt=new o,gt=new o,bt=new o,xt=(new l,[]),zt=new v;Z.prototype[m.types.TRIMESH]=Z.prototype._intersectTrimesh;const Et=new o,Bt=new o;class St extends H{constructor(t){super(),this.axisList=[],this.world=null,this.axisIndex=0;const e=this.axisList;this._addBodyHandler=t=>{e.push(t.body)},this._removeBodyHandler=t=>{const s=e.indexOf(t.body);-1!==s&&e.splice(s,1)},t&&this.setWorld(t)}setWorld(t){this.axisList.length=0;for(let e=0;e<t.bodies.length;e++)this.axisList.push(t.bodies[e]);t.removeEventListener(\"addBody\",this._addBodyHandler),t.removeEventListener(\"removeBody\",this._removeBodyHandler),t.addEventListener(\"addBody\",this._addBodyHandler),t.addEventListener(\"removeBody\",this._removeBodyHandler),this.world=t,this.dirty=!0}collisionPairs(t,e,s){const i=this.axisList,o=i.length,n=this.axisIndex;let r,a;for(this.dirty&&(this.sortList(),this.dirty=!1),r=0;r!==o;r++){const t=i[r];for(a=r+1;a<o;a++){const o=i[a];if(this.needBroadphaseCollision(t,o)){if(!St.checkBounds(t,o,n))break;this.intersectionTest(t,o,e,s)}}}}sortList(){const t=this.axisList,e=this.axisIndex,s=t.length;for(let e=0;e!==s;e++){const s=t[e];s.aabbNeedsUpdate&&s.computeAABB()}0===e?St.insertionSortX(t):1===e?St.insertionSortY(t):2===e&&St.insertionSortZ(t)}autoDetectAxis(){let t=0,e=0,s=0,i=0,o=0,n=0;const r=this.axisList,a=r.length,l=1/a;for(let l=0;l!==a;l++){const a=r[l],h=a.position.x;t+=h,e+=h*h;const c=a.position.y;s+=c,i+=c*c;const u=a.position.z;o+=u,n+=u*u}const h=e-t*t*l,c=i-s*s*l,u=n-o*o*l;this.axisIndex=h>c?h>u?0:2:c>u?1:2}aabbQuery(t,e,s=[]){this.dirty&&(this.sortList(),this.dirty=!1);const i=this.axisIndex;let o=\"x\";1===i&&(o=\"y\"),2===i&&(o=\"z\");const n=this.axisList;e.lowerBound[o],e.upperBound[o];for(let t=0;t<n.length;t++){const i=n[t];i.aabbNeedsUpdate&&i.computeAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}function At(){}St.insertionSortX=t=>{for(let e=1,s=t.length;e<s;e++){const s=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.x<=s.aabb.lowerBound.x);i--)t[i+1]=t[i];t[i+1]=s}return t},St.insertionSortY=t=>{for(let e=1,s=t.length;e<s;e++){const s=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.y<=s.aabb.lowerBound.y);i--)t[i+1]=t[i];t[i+1]=s}return t},St.insertionSortZ=t=>{for(let e=1,s=t.length;e<s;e++){const s=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.z<=s.aabb.lowerBound.z);i--)t[i+1]=t[i];t[i+1]=s}return t},St.checkBounds=(t,e,s)=>{let i,o;0===s?(i=t.position.x,o=e.position.x):1===s?(i=t.position.y,o=e.position.y):2===s&&(i=t.position.z,o=e.position.z);const n=t.boundingRadius;return o-e.boundingRadius<i+n},At.defaults=(t={},e)=>{for(let s in e)s in t||(t[s]=e[s]);return t};class Ft{constructor(t,e,s={}){s=At.defaults(s,{collideConnected:!0,wakeUpBodies:!0}),this.equations=[],this.bodyA=t,this.bodyB=e,this.id=Ft.idCounter++,this.collideConnected=s.collideConnected,s.wakeUpBodies&&(t&&t.wakeUp(),e&&e.wakeUp())}update(){throw new Error(\"method update() not implmemented in this Constraint subclass!\")}enable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!0}disable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!1}}Ft.idCounter=0;class Mt{constructor(){this.spatial=new o,this.rotational=new o}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class Ct{constructor(t,e,s=-1e6,i=1e6){this.id=Ct.id++,this.minForce=s,this.maxForce=i,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new Mt,this.jacobianElementB=new Mt,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const i=e,o=t,n=s;this.a=4/(n*(1+4*i)),this.b=4*i/(1+4*i),this.eps=4/(n*n*o*(1+4*i))}computeB(t,e,s){const i=this.computeGW();return-this.computeGq()*t-i*e-this.computeGiMf()*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.position,n=i.position;return t.spatial.dot(o)+e.spatial.dot(n)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.velocity,n=i.velocity,r=s.angularVelocity,a=i.angularVelocity;return t.multiplyVectors(o,r)+e.multiplyVectors(n,a)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.vlambda,n=i.vlambda,r=s.wlambda,a=i.wlambda;return t.multiplyVectors(o,r)+e.multiplyVectors(n,a)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.force,n=s.torque,r=i.force,a=i.torque,l=s.invMassSolve,h=i.invMassSolve;return o.scale(l,qt),r.scale(h,Tt),s.invInertiaWorldSolve.vmult(n,Pt),i.invInertiaWorldSolve.vmult(a,Rt),t.multiplyVectors(qt,Pt)+e.multiplyVectors(Tt,Rt)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,o=s.invMassSolve,n=i.invMassSolve,r=s.invInertiaWorldSolve,a=i.invInertiaWorldSolve;let l=o+n;return r.vmult(t.rotational,Nt),l+=Nt.dot(t.rotational),a.vmult(e.rotational,Nt),l+=Nt.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,i=this.bi,o=this.bj,n=jt;i.vlambda.addScaledVector(i.invMassSolve*t,e.spatial,i.vlambda),o.vlambda.addScaledVector(o.invMassSolve*t,s.spatial,o.vlambda),i.invInertiaWorldSolve.vmult(e.rotational,n),i.wlambda.addScaledVector(t,n,i.wlambda),o.invInertiaWorldSolve.vmult(s.rotational,n),o.wlambda.addScaledVector(t,n,o.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}Ct.id=0;const qt=new o,Tt=new o,Pt=new o,Rt=new o,Nt=new o,jt=new o;class It extends Ct{constructor(t,e,s=1e6){super(t,e,0,s),this.restitution=0,this.ri=new o,this.rj=new o,this.ni=new o}computeB(t){const e=this.a,s=this.b,i=this.bi,o=this.bj,n=this.ri,r=this.rj,a=Lt,l=Ot,h=i.velocity,c=i.angularVelocity,u=(i.force,i.torque,o.velocity),d=o.angularVelocity,p=(o.force,o.torque,kt),y=this.jacobianElementA,f=this.jacobianElementB,m=this.ni;n.cross(m,a),r.cross(m,l),m.negate(y.spatial),a.negate(y.rotational),f.spatial.copy(m),f.rotational.copy(l),p.copy(o.position),p.vadd(r,p),p.vsub(i.position,p),p.vsub(n,p);const v=m.dot(p),w=this.restitution+1;return-v*e-(w*u.dot(m)-w*h.dot(m)+d.dot(l)-c.dot(a))*s-t*this.computeGiMf()}getImpactVelocityAlongNormal(){const t=Vt,e=Wt,s=Ht,i=_t,o=Dt;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,i),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(i,e),t.vsub(e,o),this.ni.dot(o)}}const Lt=new o,Ot=new o,kt=new o,Vt=new o,Wt=new o,Ht=new o,_t=new o,Dt=new o;new o,new o;new o,new o;new o,new o;class Yt extends Ct{constructor(t,e,s){super(t,e,-s,s),this.ri=new o,this.rj=new o,this.t=new o}computeB(t){this.a;const e=this.b,s=(this.bi,this.bj,this.ri),i=this.rj,o=Gt,n=Ut,r=this.t;s.cross(r,o),i.cross(r,n);const a=this.jacobianElementA,l=this.jacobianElementB;r.negate(a.spatial),o.negate(a.rotational),l.spatial.copy(r),l.rotational.copy(n);return-this.computeGW()*e-t*this.computeGiMf()}}const Gt=new o,Ut=new o;class Xt{constructor(t,e,s){s=At.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=Xt.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}Xt.idCounter=0;class Zt{constructor(t={}){let e=\"\";\"string\"==typeof t&&(e=t,t={}),this.name=e,this.id=Zt.idCounter++,this.friction=void 0!==t.friction?t.friction:-1,this.restitution=void 0!==t.restitution?t.restitution:-1}}Zt.idCounter=0;new o,new o,new o,new o,new o,new o,new o,new o,new o,new o,new o;new o,new o;new o,new o,new o,new Z,new o,new o,new o(1,0,0),new o(0,1,0),new o(0,0,1),new o,new o,new o,new o;new o,new o,new o,new o;new o,new o,new o;new o,new o;new o,new o,new o,new o,new o,new o,new o;new o;new o,new o,new o,new o,new o,new o,new o,new o,new o;class Kt{constructor(t={}){this.root=t.root||null,this.aabb=t.aabb?t.aabb.clone():new l,this.data=[],this.children=[]}reset(){this.children.length=this.data.length=0}insert(t,e,s=0){const i=this.data;if(!this.aabb.contains(t))return!1;const o=this.children;if(s<(this.maxDepth||this.root.maxDepth)){let i=!1;o.length||(this.subdivide(),i=!0);for(let i=0;8!==i;i++)if(o[i].insert(t,e,s+1))return!0;i&&(o.length=0)}return i.push(e),!0}subdivide(){const t=this.aabb,e=t.lowerBound,s=t.upperBound,i=this.children;i.push(new Kt({aabb:new l({lowerBound:new o(0,0,0)})}),new Kt({aabb:new l({lowerBound:new o(1,0,0)})}),new Kt({aabb:new l({lowerBound:new o(1,1,0)})}),new Kt({aabb:new l({lowerBound:new o(1,1,1)})}),new Kt({aabb:new l({lowerBound:new o(0,1,1)})}),new Kt({aabb:new l({lowerBound:new o(0,0,1)})}),new Kt({aabb:new l({lowerBound:new o(1,0,1)})}),new Kt({aabb:new l({lowerBound:new o(0,1,0)})})),s.vsub(e,Jt),Jt.scale(.5,Jt);const n=this.root||this;for(let t=0;8!==t;t++){const s=i[t];s.root=n;const o=s.aabb.lowerBound;o.x*=Jt.x,o.y*=Jt.y,o.z*=Jt.z,o.vadd(e,o),o.vadd(Jt,s.aabb.upperBound)}}aabbQuery(t,e){this.data,this.children;const s=[this];for(;s.length;){const i=s.pop();i.aabb.overlaps(t)&&Array.prototype.push.apply(e,i.data),Array.prototype.push.apply(s,i.children)}return e}rayQuery(t,e,s){return t.getAABB($t),$t.toLocalFrame(e,$t),this.aabbQuery($t,s),s}removeEmptyNodes(){for(let t=this.children.length-1;t>=0;t--)this.children[t].removeEmptyNodes(),this.children[t].children.length||this.children[t].data.length||this.children.splice(t,1)}}class Qt extends Kt{constructor(t,e={}){super({root:null,aabb:t}),this.maxDepth=void 0!==e.maxDepth?e.maxDepth:8}}const Jt=new o,$t=new l;class te extends m{constructor(t,e){super({type:m.types.TRIMESH}),this.vertices=new Float32Array(t),this.indices=new Int16Array(e),this.normals=new Float32Array(e.length),this.aabb=new l,this.edges=null,this.scale=new o(1,1,1),this.tree=new Qt,this.updateEdges(),this.updateNormals(),this.updateAABB(),this.updateBoundingSphereRadius(),this.updateTree()}updateTree(){const t=this.tree;t.reset(),t.aabb.copy(this.aabb);const e=this.scale;t.aabb.lowerBound.x*=1/e.x,t.aabb.lowerBound.y*=1/e.y,t.aabb.lowerBound.z*=1/e.z,t.aabb.upperBound.x*=1/e.x,t.aabb.upperBound.y*=1/e.y,t.aabb.upperBound.z*=1/e.z;const s=new l,i=new o,n=new o,r=new o,a=[i,n,r];for(let e=0;e<this.indices.length/3;e++){const o=3*e;this._getUnscaledVertex(this.indices[o],i),this._getUnscaledVertex(this.indices[o+1],n),this._getUnscaledVertex(this.indices[o+2],r),s.setFromPoints(a),t.insert(s,e)}t.removeEmptyNodes()}getTrianglesInAABB(t,e){se.copy(t);const s=this.scale,i=s.x,o=s.y,n=s.z,r=se.lowerBound,a=se.upperBound;return r.x/=i,r.y/=o,r.z/=n,a.x/=i,a.y/=o,a.z/=n,this.tree.aabbQuery(se,e)}setScale(t){const e=this.scale.x===this.scale.y&&this.scale.y===this.scale.z,s=t.x===t.y&&t.y===t.z;e&&s||this.updateNormals(),this.scale.copy(t),this.updateAABB(),this.updateBoundingSphereRadius()}updateNormals(){const t=ee,e=this.normals;for(let s=0;s<this.indices.length/3;s++){const i=3*s,o=this.indices[i],n=this.indices[i+1],r=this.indices[i+2];this.getVertex(o,ae),this.getVertex(n,le),this.getVertex(r,he),te.computeNormal(le,ae,he,t),e[i]=t.x,e[i+1]=t.y,e[i+2]=t.z}}updateEdges(){const t={},e=(e,s)=>{t[e<s?e+\"_\"+s:s+\"_\"+e]=!0};for(let t=0;t<this.indices.length/3;t++){const s=3*t,i=this.indices[s],o=this.indices[s+1],n=this.indices[s+2];e(i,o),e(o,n),e(n,i)}const s=Object.keys(t);this.edges=new Int16Array(2*s.length);for(let t=0;t<s.length;t++){const e=s[t].split(\"_\");this.edges[2*t]=parseInt(e[0],10),this.edges[2*t+1]=parseInt(e[1],10)}}getEdgeVertex(t,e,s){const i=this.edges[2*t+(e?1:0)];this.getVertex(i,s)}getEdgeVector(t,e){const s=ie,i=oe;this.getEdgeVertex(t,0,s),this.getEdgeVertex(t,1,i),i.vsub(s,e)}getVertex(t,e){const s=this.scale;return this._getUnscaledVertex(t,e),e.x*=s.x,e.y*=s.y,e.z*=s.z,e}_getUnscaledVertex(t,e){const s=3*t,i=this.vertices;return e.set(i[s],i[s+1],i[s+2])}getWorldVertex(t,e,s,i){return this.getVertex(t,i),v.pointToWorldFrame(e,s,i,i),i}getTriangleVertices(t,e,s,i){const o=3*t;this.getVertex(this.indices[o],e),this.getVertex(this.indices[o+1],s),this.getVertex(this.indices[o+2],i)}getNormal(t,e){const s=3*t;return e.set(this.normals[s],this.normals[s+1],this.normals[s+2])}calculateLocalInertia(t,e){this.computeLocalAABB(ce);const s=ce.upperBound.x-ce.lowerBound.x,i=ce.upperBound.y-ce.lowerBound.y,o=ce.upperBound.z-ce.lowerBound.z;return e.set(1/12*t*(2*i*2*i+2*o*2*o),1/12*t*(2*s*2*s+2*o*2*o),1/12*t*(2*i*2*i+2*s*2*s))}computeLocalAABB(t){const e=t.lowerBound,s=t.upperBound,i=this.vertices.length,o=(this.vertices,ue);this.getVertex(0,o),e.copy(o),s.copy(o);for(let t=0;t!==i;t++)this.getVertex(t,o),o.x<e.x?e.x=o.x:o.x>s.x&&(s.x=o.x),o.y<e.y?e.y=o.y:o.y>s.y&&(s.y=o.y),o.z<e.z?e.z=o.z:o.z>s.z&&(s.z=o.z)}updateAABB(){this.computeLocalAABB(this.aabb)}updateBoundingSphereRadius(){let t=0;const e=this.vertices,s=new o;for(let i=0,o=e.length/3;i!==o;i++){this.getVertex(i,s);const e=s.lengthSquared();e>t&&(t=e)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,i){const o=de,n=pe;o.position=t,o.quaternion=e,this.aabb.toWorldFrame(o,n),s.copy(n.lowerBound),i.copy(n.upperBound)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}}const ee=new o,se=new l,ie=new o,oe=new o,ne=new o,re=new o;te.computeNormal=(t,e,s,i)=>{e.vsub(t,re),s.vsub(e,ne),ne.cross(re,i),i.isZero()||i.normalize()};const ae=new o,le=new o,he=new o,ce=new l,ue=new o,de=new v,pe=new l;te.createTorus=(t=1,e=.5,s=8,i=6,o=2*Math.PI)=>{const n=[],r=[];for(let r=0;r<=s;r++)for(let a=0;a<=i;a++){const l=a/i*o,h=r/s*Math.PI*2,c=(t+e*Math.cos(h))*Math.cos(l),u=(t+e*Math.cos(h))*Math.sin(l),d=e*Math.sin(h);n.push(c,u,d)}for(let t=1;t<=s;t++)for(let e=1;e<=i;e++){const s=(i+1)*t+e-1,o=(i+1)*(t-1)+e-1,n=(i+1)*(t-1)+e,a=(i+1)*t+e;r.push(s,o,a),r.push(o,n,a)}return new te(n,r)};class ye{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);-1!==s&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class fe extends ye{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const i=this.iterations,o=this.tolerance*this.tolerance,n=this.equations,r=n.length,a=e.bodies,l=a.length,h=t;let c,u,d,p,y,f;if(0!==r)for(let t=0;t!==l;t++)a[t].updateSolveMassProperties();const m=ve,v=we,w=me;m.length=r,v.length=r,w.length=r;for(let t=0;t!==r;t++){const e=n[t];w[t]=0,v[t]=e.computeB(h),m[t]=1/e.computeC()}if(0!==r){for(let t=0;t!==l;t++){const e=a[t],s=e.vlambda,i=e.wlambda;s.set(0,0,0),i.set(0,0,0)}for(s=0;s!==i;s++){p=0;for(let t=0;t!==r;t++){const e=n[t];c=v[t],u=m[t],f=w[t],y=e.computeGWlambda(),d=u*(c-y-e.eps*f),f+d<e.minForce?d=e.minForce-f:f+d>e.maxForce&&(d=e.maxForce-f),w[t]+=d,p+=d>0?d:-d,e.addToWlambda(d)}if(p*p<o)break}for(let t=0;t!==l;t++){const e=a[t],s=e.velocity,i=e.angularVelocity;e.vlambda.vmul(e.linearFactor,e.vlambda),s.vadd(e.vlambda,s),e.wlambda.vmul(e.angularFactor,e.wlambda),i.vadd(e.wlambda,i)}let t=n.length;const e=1/h;for(;t--;)n[t].multiplier=w[t]*e}return s}}const me=[],ve=[],we=[];M.STATIC;class ge extends class{constructor(){this.objects=[],this.type=Object}release(...t){const e=t.length;for(let s=0;s!==e;s++)this.objects.push(t[s]);return this}get(){return 0===this.objects.length?this.constructObject():this.objects.pop()}constructObject(){throw new Error(\"constructObject() not implemented in this Pool subclass yet!\")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}{constructor(){super(),this.type=o}constructObject(){return new o}}const be=m.types.SPHERE,xe=m.types.SPHERE|m.types.PLANE,ze=m.types.BOX|m.types.BOX,Ee=m.types.SPHERE|m.types.BOX,Be=m.types.PLANE|m.types.BOX,Se=m.types.CONVEXPOLYHEDRON,Ae=m.types.SPHERE|m.types.CONVEXPOLYHEDRON,Fe=m.types.PLANE|m.types.CONVEXPOLYHEDRON,Me=m.types.BOX|m.types.CONVEXPOLYHEDRON,Ce=m.types.SPHERE|m.types.HEIGHTFIELD,qe=m.types.BOX|m.types.HEIGHTFIELD,Te=m.types.CONVEXPOLYHEDRON|m.types.HEIGHTFIELD,Pe=m.types.PARTICLE|m.types.SPHERE,Re=m.types.PLANE|m.types.PARTICLE,Ne=m.types.BOX|m.types.PARTICLE,je=m.types.PARTICLE|m.types.CONVEXPOLYHEDRON,Ie=m.types.SPHERE|m.types.TRIMESH,Le=m.types.PLANE|m.types.TRIMESH;class Oe{constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new ge,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,i,o,n){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new It(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&i.collisionResponse;const a=this.currentContactMaterial;r.restitution=a.restitution,r.setSpookParams(a.contactEquationStiffness,a.contactEquationRelaxation,this.world.dt);const l=s.material||t.material,h=i.material||e.material;return l&&h&&l.restitution>=0&&h.restitution>=0&&(r.restitution=l.restitution*h.restitution),r.si=o||s,r.sj=n||i,r}createFrictionEquationsFromContact(t,e){const s=t.bi,i=t.bj,o=t.si,n=t.sj,r=this.world,a=this.currentContactMaterial;let l=a.friction;const h=o.material||s.material,c=n.material||i.material;if(h&&c&&h.friction>=0&&c.friction>=0&&(l=h.friction*c.friction),l>0){const o=l*r.gravity.length();let n=s.invMass+i.invMass;n>0&&(n=1/n);const h=this.frictionEquationPool,c=h.length?h.pop():new Yt(s,i,o*n),u=h.length?h.pop():new Yt(s,i,o*n);return c.bi=u.bi=s,c.bj=u.bj=i,c.minForce=u.minForce=-o*n,c.maxForce=u.maxForce=o*n,c.ri.copy(t.ri),c.rj.copy(t.rj),u.ri.copy(t.ri),u.rj.copy(t.rj),t.ni.tangents(c.t,u.t),c.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),u.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),c.enabled=u.enabled=t.enabled,e.push(c,u),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||1===t)return;const s=this.frictionResult[this.frictionResult.length-2],i=this.frictionResult[this.frictionResult.length-1];ke.setZero(),Ve.setZero(),We.setZero();const o=e.bi;e.bj;for(let s=0;s!==t;s++)e=this.result[this.result.length-1-s],e.bi!==o?(ke.vadd(e.ni,ke),Ve.vadd(e.ri,Ve),We.vadd(e.rj,We)):(ke.vsub(e.ni,ke),Ve.vadd(e.rj,Ve),We.vadd(e.ri,We));const n=1/t;Ve.scale(n,s.ri),We.scale(n,s.rj),i.ri.copy(s.ri),i.rj.copy(s.rj),ke.normalize(),ke.tangents(s.t,i.t)}getContacts(t,e,s,i,o,n,r){this.contactPointPool=o,this.frictionEquationPool=r,this.result=i,this.frictionResult=n;const a=De,l=Ye,h=He,c=_e;for(let i=0,o=t.length;i!==o;i++){const o=t[i],n=e[i];let r=null;o.material&&n.material&&(r=s.getContactMaterial(o.material,n.material)||null);const u=o.type&M.KINEMATIC&&n.type&M.STATIC||o.type&M.STATIC&&n.type&M.KINEMATIC||o.type&M.KINEMATIC&&n.type&M.KINEMATIC;for(let t=0;t<o.shapes.length;t++){o.quaternion.mult(o.shapeOrientations[t],a),o.quaternion.vmult(o.shapeOffsets[t],h),h.vadd(o.position,h);const e=o.shapes[t];for(let t=0;t<n.shapes.length;t++){n.quaternion.mult(n.shapeOrientations[t],l),n.quaternion.vmult(n.shapeOffsets[t],c),c.vadd(n.position,c);const i=n.shapes[t];if(!(e.collisionFilterMask&i.collisionFilterGroup&&i.collisionFilterMask&e.collisionFilterGroup))continue;if(h.distanceTo(c)>e.boundingSphereRadius+i.boundingSphereRadius)continue;let d=null;e.material&&i.material&&(d=s.getContactMaterial(e.material,i.material)||null),this.currentContactMaterial=d||r||s.defaultContactMaterial;const p=this[e.type|i.type];if(p){let t=!1;t=e.type<i.type?p.call(this,e,i,h,c,a,l,o,n,e,i,u):p.call(this,i,e,c,h,l,a,n,o,e,i,u),t&&u&&(s.shapeOverlapKeeper.set(e.id,i.id),s.bodyOverlapKeeper.set(o.id,n.id))}}}}}sphereSphere(t,e,s,i,o,n,r,a,l,h,c){if(c)return s.distanceSquared(i)<(t.radius+e.radius)**2;const u=this.createContactEquation(r,a,t,e,l,h);i.vsub(s,u.ni),u.ni.normalize(),u.ri.copy(u.ni),u.rj.copy(u.ni),u.ri.scale(t.radius,u.ri),u.rj.scale(-e.radius,u.rj),u.ri.vadd(s,u.ri),u.ri.vsub(r.position,u.ri),u.rj.vadd(i,u.rj),u.rj.vsub(a.position,u.rj),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}spherePlane(t,e,s,i,o,n,r,a,l,h,c){const u=this.createContactEquation(r,a,t,e,l,h);if(u.ni.set(0,0,1),n.vmult(u.ni,u.ni),u.ni.negate(u.ni),u.ni.normalize(),u.ni.scale(t.radius,u.ri),s.vsub(i,cs),u.ni.scale(u.ni.dot(cs),us),cs.vsub(us,u.rj),-cs.dot(u.ni)<=t.radius){if(c)return!0;const t=u.ri,e=u.rj;t.vadd(s,t),t.vsub(r.position,t),e.vadd(i,e),e.vsub(a.position,e),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}}boxBox(t,e,s,i,o,n,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,i,o,n,r,a,t,e,c)}sphereBox(t,e,s,i,o,n,r,a,l,h,c){const u=this.v3pool,d=bs;s.vsub(i,ms),e.getSideNormals(d,n);const p=t.radius;let y=!1;const f=zs,m=Es,v=Bs;let w=null,g=0,b=0,x=0,z=null;for(let t=0,e=d.length;t!==e&&!1===y;t++){const e=vs;e.copy(d[t]);const s=e.length();e.normalize();const i=ms.dot(e);if(i<s+p&&i>0){const o=ws,n=gs;o.copy(d[(t+1)%3]),n.copy(d[(t+2)%3]);const r=o.length(),a=n.length();o.normalize(),n.normalize();const l=ms.dot(o),h=ms.dot(n);if(l<r&&l>-r&&h<a&&h>-a){const t=Math.abs(i-s-p);if((null===z||t<z)&&(z=t,b=l,x=h,w=s,f.copy(e),m.copy(o),v.copy(n),g++,c))return!0}}}if(g){y=!0;const o=this.createContactEquation(r,a,t,e,l,h);f.scale(-p,o.ri),o.ni.copy(f),o.ni.negate(o.ni),f.scale(w,f),m.scale(b,m),f.vadd(m,f),v.scale(x,v),f.vadd(v,o.rj),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}let E=u.get();const B=xs;for(let o=0;2!==o&&!y;o++)for(let n=0;2!==n&&!y;n++)for(let u=0;2!==u&&!y;u++)if(E.set(0,0,0),o?E.vadd(d[0],E):E.vsub(d[0],E),n?E.vadd(d[1],E):E.vsub(d[1],E),u?E.vadd(d[2],E):E.vsub(d[2],E),i.vadd(E,B),B.vsub(s,B),B.lengthSquared()<p*p){if(c)return!0;y=!0;const o=this.createContactEquation(r,a,t,e,l,h);o.ri.copy(B),o.ri.normalize(),o.ni.copy(o.ri),o.ri.scale(p,o.ri),o.rj.copy(E),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}u.release(E),E=null;const S=u.get(),A=u.get(),F=u.get(),M=u.get(),C=u.get(),q=d.length;for(let o=0;o!==q&&!y;o++)for(let n=0;n!==q&&!y;n++)if(o%3!=n%3){d[n].cross(d[o],S),S.normalize(),d[o].vadd(d[n],A),F.copy(s),F.vsub(A,F),F.vsub(i,F);const u=F.dot(S);S.scale(u,M);let f=0;for(;f===o%3||f===n%3;)f++;C.copy(s),C.vsub(M,C),C.vsub(A,C),C.vsub(i,C);const m=Math.abs(u),v=C.length();if(m<d[f].length()&&v<p){if(c)return!0;y=!0;const o=this.createContactEquation(r,a,t,e,l,h);A.vadd(M,o.rj),o.rj.copy(o.rj),C.negate(o.ni),o.ni.normalize(),o.ri.copy(o.rj),o.ri.vadd(i,o.ri),o.ri.vsub(s,o.ri),o.ri.normalize(),o.ri.scale(p,o.ri),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}}u.release(S,A,F,M,C)}planeBox(t,e,s,i,o,n,r,a,l,h,c){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,i,o,n,r,a,t,e,c)}convexConvex(t,e,s,i,o,n,r,a,l,h,c,u,d){const p=ks;if(!(s.distanceTo(i)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,o,i,n,p,u,d)){const u=[],d=Vs;t.clipAgainstHull(s,o,e,i,n,p,-100,100,u);let y=0;for(let o=0;o!==u.length;o++){if(c)return!0;const n=this.createContactEquation(r,a,t,e,l,h),f=n.ri,m=n.rj;p.negate(n.ni),u[o].normal.negate(d),d.scale(u[o].depth,d),u[o].point.vadd(d,f),m.copy(u[o].point),f.vsub(s,f),m.vsub(i,m),f.vadd(s,f),f.vsub(r.position,f),m.vadd(i,m),m.vsub(a.position,m),this.result.push(n),y++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(n,this.frictionResult)}this.enableFrictionReduction&&y&&this.createFrictionFromAverage(y)}}sphereConvex(t,e,s,i,o,n,r,a,l,h,c){const u=this.v3pool;s.vsub(i,Ss);const d=e.faceNormals,p=e.faces,y=e.vertices,f=t.radius;let m=!1;for(let o=0;o!==y.length;o++){const u=y[o],d=Cs;n.vmult(u,d),i.vadd(d,d);const p=Ms;if(d.vsub(s,p),p.lengthSquared()<f*f){if(c)return!0;m=!0;const o=this.createContactEquation(r,a,t,e,l,h);return o.ri.copy(p),o.ri.normalize(),o.ni.copy(o.ri),o.ri.scale(f,o.ri),d.vsub(i,o.rj),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),void this.createFrictionEquationsFromContact(o,this.frictionResult)}}for(let o=0,v=p.length;o!==v&&!1===m;o++){const v=d[o],w=p[o],g=qs;n.vmult(v,g);const b=Ts;n.vmult(y[w[0]],b),b.vadd(i,b);const x=Ps;g.scale(-f,x),s.vadd(x,x);const z=Rs;x.vsub(b,z);const E=z.dot(g),B=Ns;if(s.vsub(b,B),E<0&&B.dot(g)>0){const o=[];for(let t=0,e=w.length;t!==e;t++){const e=u.get();n.vmult(y[w[t]],e),i.vadd(e,e),o.push(e)}if(fs(o,g,s)){if(c)return!0;m=!0;const n=this.createContactEquation(r,a,t,e,l,h);g.scale(-f,n.ri),g.negate(n.ni);const d=u.get();g.scale(-E,d);const p=u.get();g.scale(-f,p),s.vsub(i,n.rj),n.rj.vadd(p,n.rj),n.rj.vadd(d,n.rj),n.rj.vadd(i,n.rj),n.rj.vsub(a.position,n.rj),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),u.release(d),u.release(p),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult);for(let t=0,e=o.length;t!==e;t++)u.release(o[t]);return}for(let d=0;d!==w.length;d++){const p=u.get(),m=u.get();n.vmult(y[w[(d+1)%w.length]],p),n.vmult(y[w[(d+2)%w.length]],m),i.vadd(p,p),i.vadd(m,m);const v=As;m.vsub(p,v);const g=Fs;v.unit(g);const b=u.get(),x=u.get();s.vsub(p,x);const z=x.dot(g);g.scale(z,b),b.vadd(p,b);const E=u.get();if(b.vsub(s,E),z>0&&z*z<v.lengthSquared()&&E.lengthSquared()<f*f){if(c)return!0;const n=this.createContactEquation(r,a,t,e,l,h);b.vsub(i,n.rj),b.vsub(s,n.ni),n.ni.normalize(),n.ni.scale(f,n.ri),n.rj.vadd(i,n.rj),n.rj.vsub(a.position,n.rj),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult);for(let t=0,e=o.length;t!==e;t++)u.release(o[t]);return u.release(p),u.release(m),u.release(b),u.release(E),void u.release(x)}u.release(p),u.release(m),u.release(b),u.release(E),u.release(x)}for(let t=0,e=o.length;t!==e;t++)u.release(o[t])}}}planeConvex(t,e,s,i,o,n,r,a,l,h,c){const u=js,d=Is;d.set(0,0,1),o.vmult(d,d);let p=0;const y=Ls;for(let o=0;o!==e.vertices.length;o++){u.copy(e.vertices[o]),n.vmult(u,u),i.vadd(u,u),u.vsub(s,y);if(d.dot(y)<=0){if(c)return!0;const o=this.createContactEquation(r,a,t,e,l,h),n=Os;d.scale(d.dot(y),n),u.vsub(n,n),n.vsub(s,o.ri),o.ni.copy(d),u.vsub(i,o.rj),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(o,this.frictionResult)}}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,i,o,n,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,i,o,n,r,a,t,e,c)}sphereHeightfield(t,e,s,i,o,n,r,a,l,h,c){const u=e.data,d=t.radius,p=e.elementSize,y=ti,f=$s;v.pointToLocalFrame(i,n,s,f);let m=Math.floor((f.x-d)/p)-1,w=Math.ceil((f.x+d)/p)+1,g=Math.floor((f.y-d)/p)-1,b=Math.ceil((f.y+d)/p)+1;if(w<0||b<0||m>u.length||g>u[0].length)return;m<0&&(m=0),w<0&&(w=0),g<0&&(g=0),b<0&&(b=0),m>=u.length&&(m=u.length-1),w>=u.length&&(w=u.length-1),b>=u[0].length&&(b=u[0].length-1),g>=u[0].length&&(g=u[0].length-1);const x=[];e.getRectMinMax(m,g,w,b,x);const z=x[0],E=x[1];if(f.z-d>E||f.z+d<z)return;const B=this.result;for(let l=m;l<w;l++)for(let h=g;h<b;h++){const u=B.length;let d=!1;if(e.getConvexTrianglePillar(l,h,!1),v.pointToWorldFrame(i,n,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(d=this.sphereConvex(t,e.pillarConvex,s,y,o,n,r,a,t,e,c)),c&&d)return!0;if(e.getConvexTrianglePillar(l,h,!0),v.pointToWorldFrame(i,n,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(d=this.sphereConvex(t,e.pillarConvex,s,y,o,n,r,a,t,e,c)),c&&d)return!0;if(B.length-u>2)return}}boxHeightfield(t,e,s,i,o,n,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,i,o,n,r,a,t,e,c)}convexHeightfield(t,e,s,i,o,n,r,a,l,h,c){const u=e.data,d=e.elementSize,p=t.boundingSphereRadius,y=Qs,f=Js,m=Ks;v.pointToLocalFrame(i,n,s,m);let w=Math.floor((m.x-p)/d)-1,g=Math.ceil((m.x+p)/d)+1,b=Math.floor((m.y-p)/d)-1,x=Math.ceil((m.y+p)/d)+1;if(g<0||x<0||w>u.length||b>u[0].length)return;w<0&&(w=0),g<0&&(g=0),b<0&&(b=0),x<0&&(x=0),w>=u.length&&(w=u.length-1),g>=u.length&&(g=u.length-1),x>=u[0].length&&(x=u[0].length-1),b>=u[0].length&&(b=u[0].length-1);const z=[];e.getRectMinMax(w,b,g,x,z);const E=z[0],B=z[1];if(!(m.z-p>B||m.z+p<E))for(let l=w;l<g;l++)for(let h=b;h<x;h++){let u=!1;if(e.getConvexTrianglePillar(l,h,!1),v.pointToWorldFrame(i,n,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.convexConvex(t,e.pillarConvex,s,y,o,n,r,a,null,null,c,f,null)),c&&u)return!0;if(e.getConvexTrianglePillar(l,h,!0),v.pointToWorldFrame(i,n,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.convexConvex(t,e.pillarConvex,s,y,o,n,r,a,null,null,c,f,null)),c&&u)return!0}}sphereParticle(t,e,s,i,o,n,r,a,l,h,c){const u=Ds;u.set(0,0,1),i.vsub(s,u);if(u.lengthSquared()<=t.radius*t.radius){if(c)return!0;const s=this.createContactEquation(a,r,e,t,l,h);u.normalize(),s.rj.copy(u),s.rj.scale(t.radius,s.rj),s.ni.copy(u),s.ni.negate(s.ni),s.ri.set(0,0,0),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult)}}planeParticle(t,e,s,i,o,n,r,a,l,h,c){const u=Ws;u.set(0,0,1),r.quaternion.vmult(u,u);const d=Hs;i.vsub(r.position,d);if(u.dot(d)<=0){if(c)return!0;const s=this.createContactEquation(a,r,e,t,l,h);s.ni.copy(u),s.ni.negate(s.ni),s.ri.set(0,0,0);const o=_s;u.scale(u.dot(i),o),i.vsub(o,o),s.rj.copy(o),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult)}}boxParticle(t,e,s,i,o,n,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,i,o,n,r,a,t,e,c)}convexParticle(t,e,s,i,o,n,r,a,l,h,c){let u=-1;const d=Us,p=Zs;let y=null;const f=Gs;if(f.copy(i),f.vsub(s,f),o.conjugate(Ys),Ys.vmult(f,f),t.pointIsInside(f)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,o),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(o);for(let e=0,s=t.faces.length;e!==s;e++){const s=[t.worldVertices[t.faces[e][0]]],o=t.worldFaceNormals[e];i.vsub(s[0],Xs);const n=-o.dot(Xs);if(null===y||Math.abs(n)<Math.abs(y)){if(c)return!0;y=n,u=e,d.copy(o)}}if(-1!==u){const o=this.createContactEquation(a,r,e,t,l,h);d.scale(y,p),p.vadd(i,p),p.vsub(s,p),o.rj.copy(p),d.negate(o.ni),o.ri.set(0,0,0);const n=o.ri,c=o.rj;n.vadd(i,n),n.vsub(a.position,n),c.vadd(s,c),c.vsub(r.position,c),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}else console.warn(\"Point found inside convex, but did not find penetrating face!\")}}sphereTrimesh(t,e,s,i,o,n,r,a,l,h,c){const u=$e,d=ts,p=es,y=ss,f=is,m=os,w=ls,g=Je,b=Ke,x=hs;v.pointToLocalFrame(i,n,s,f);const z=t.radius;w.lowerBound.set(f.x-z,f.y-z,f.z-z),w.upperBound.set(f.x+z,f.y+z,f.z+z),e.getTrianglesInAABB(w,x);const E=Qe,B=t.radius*t.radius;for(let o=0;o<x.length;o++)for(let u=0;u<3;u++)if(e.getVertex(e.indices[3*x[o]+u],E),E.vsub(f,b),b.lengthSquared()<=B){if(g.copy(E),v.pointToWorldFrame(i,n,g,E),E.vsub(s,b),c)return!0;let o=this.createContactEquation(r,a,t,e,l,h);o.ni.copy(b),o.ni.normalize(),o.ri.copy(o.ni),o.ri.scale(t.radius,o.ri),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),o.rj.copy(E),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}for(let o=0;o<x.length;o++)for(let w=0;w<3;w++){e.getVertex(e.indices[3*x[o]+w],u),e.getVertex(e.indices[3*x[o]+(w+1)%3],d),d.vsub(u,p),f.vsub(d,m);const g=m.dot(p);f.vsub(u,m);let b=m.dot(p);if(b>0&&g<0){f.vsub(u,m),y.copy(p),y.normalize(),b=m.dot(y),y.scale(b,m),m.vadd(u,m);if(m.distanceTo(f)<t.radius){if(c)return!0;const o=this.createContactEquation(r,a,t,e,l,h);m.vsub(f,o.ni),o.ni.normalize(),o.ni.scale(t.radius,o.ri),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),v.pointToWorldFrame(i,n,m,m),m.vsub(a.position,o.rj),v.vectorToWorldFrame(n,o.ni,o.ni),v.vectorToWorldFrame(n,o.ri,o.ri),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}}}const S=ns,A=rs,F=as,M=Ze;for(let o=0,u=x.length;o!==u;o++){e.getTriangleVertices(x[o],S,A,F),e.getNormal(x[o],M),f.vsub(S,m);let u=m.dot(M);if(M.scale(u,m),f.vsub(m,m),u=m.distanceTo(f),Z.pointInTriangle(m,S,A,F)&&u<t.radius){if(c)return!0;let o=this.createContactEquation(r,a,t,e,l,h);m.vsub(f,o.ni),o.ni.normalize(),o.ni.scale(t.radius,o.ri),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),v.pointToWorldFrame(i,n,m,m),m.vsub(a.position,o.rj),v.vectorToWorldFrame(n,o.ni,o.ni),v.vectorToWorldFrame(n,o.ri,o.ri),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}}x.length=0}planeTrimesh(t,e,s,i,n,r,a,l,h,c,u){const d=new o,p=Ge;p.set(0,0,1),n.vmult(p,p);for(let n=0;n<e.vertices.length/3;n++){e.getVertex(n,d);const y=new o;y.copy(d),v.pointToWorldFrame(i,r,y,d);const f=Ue;d.vsub(s,f);if(p.dot(f)<=0){if(u)return!0;const s=this.createContactEquation(a,l,t,e,h,c);s.ni.copy(p);const i=Xe;p.scale(f.dot(p),i),d.vsub(i,i),s.ri.copy(i),s.ri.vsub(a.position,s.ri),s.rj.copy(d),s.rj.vsub(l.position,s.rj),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult)}}}}const ke=new o,Ve=new o,We=new o,He=new o,_e=new o,De=new p,Ye=new p;Oe.prototype[ze]=Oe.prototype.boxBox,Oe.prototype[Me]=Oe.prototype.boxConvex,Oe.prototype[Ne]=Oe.prototype.boxParticle,Oe.prototype[be]=Oe.prototype.sphereSphere;const Ge=new o,Ue=new o,Xe=new o;Oe.prototype[Le]=Oe.prototype.planeTrimesh;const Ze=new o,Ke=new o,Qe=new o,Je=new o,$e=new o,ts=new o,es=new o,ss=new o,is=new o,os=new o,ns=new o,rs=new o,as=new o,ls=new l,hs=[];Oe.prototype[Ie]=Oe.prototype.sphereTrimesh;const cs=new o,us=new o;Oe.prototype[xe]=Oe.prototype.spherePlane;const ds=new o,ps=new o,ys=new o;function fs(t,e,s){let i=null;const o=t.length;for(let n=0;n!==o;n++){const r=t[n],a=ds;t[(n+1)%o].vsub(r,a);const l=ps;a.cross(e,l);const h=ys;s.vsub(r,h);const c=l.dot(h);if(!(null===i||c>0&&!0===i||c<=0&&!1===i))return!1;null===i&&(i=c>0)}return!0}const ms=new o,vs=new o,ws=new o,gs=new o,bs=[new o,new o,new o,new o,new o,new o],xs=new o,zs=new o,Es=new o,Bs=new o;Oe.prototype[Ee]=Oe.prototype.sphereBox;const Ss=new o,As=new o,Fs=new o,Ms=new o,Cs=new o,qs=new o,Ts=new o,Ps=new o,Rs=new o,Ns=new o;Oe.prototype[Ae]=Oe.prototype.sphereConvex,Oe.prototype[Be]=Oe.prototype.planeBox;const js=new o,Is=new o,Ls=new o,Os=new o;Oe.prototype[Fe]=Oe.prototype.planeConvex;const ks=new o,Vs=new o;Oe.prototype[Se]=Oe.prototype.convexConvex;const Ws=new o,Hs=new o,_s=new o;Oe.prototype[Re]=Oe.prototype.planeParticle;const Ds=new o;Oe.prototype[Pe]=Oe.prototype.sphereParticle;const Ys=new p,Gs=new o,Us=new o,Xs=new o,Zs=new o;Oe.prototype[je]=Oe.prototype.convexParticle,Oe.prototype[qe]=Oe.prototype.boxHeightfield;const Ks=new o,Qs=new o,Js=[0];Oe.prototype[Te]=Oe.prototype.convexHeightfield;const $s=new o,ti=new o;Oe.prototype[Ce]=Oe.prototype.sphereHeightfield;class ei{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),i=this.current;let o=0;for(;s>i[o];)o++;if(s!==i[o]){for(let t=i.length-1;t>=o;t--)i[t+1]=i[t];i[o]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,i=this.previous,o=s.length,n=i.length;let r=0;for(let e=0;e<o;e++){let o=!1;const n=s[e];for(;n>i[r];)r++;o=n===i[r],o||si(t,n)}r=0;for(let t=0;t<n;t++){let o=!1;const n=i[t];for(;n>s[r];)r++;o=s[r]===n,o||si(e,n)}}}function si(t,e){t.push((4294901760&e)>>16,65535&e)}class ii{constructor(){this.data={keys:[]}}get(t,e){if(t>e){const s=e;e=t,t=s}return this.data[t+\"-\"+e]}set(t,e,s){if(t>e){const s=e;e=t,t=s}const i=t+\"-\"+e;this.get(t,e)||this.data.keys.push(i),this.data[i]=s}reset(){const t=this.data,e=t.keys;for(;e.length>0;){delete t[e.pop()]}}}new l;const oi=new Z,ni=globalThis.performance||{};if(!ni.now){let t=Date.now();ni.timing&&ni.timing.navigationStart&&(t=ni.timing.navigationStart),ni.now=()=>Date.now()-t}const ri={type:\"postStep\"},ai={type:\"preStep\"},li={type:M.COLLIDE_EVENT_NAME,body:null,contact:null},hi=[],ci=[],ui=[],di=[];(class extends d{constructor(t={}){super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=void 0!==t.quatNormalizeSkip?t.quatNormalizeSkip:0,this.quatNormalizeFast=void 0!==t.quatNormalizeFast&&t.quatNormalizeFast,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new o,t.gravity&&this.gravity.copy(t.gravity),this.broadphase=void 0!==t.broadphase?t.broadphase:new U,this.bodies=[],this.hasActiveBodies=!1,this.solver=void 0!==t.solver?t.solver:new fe,this.constraints=[],this.narrowphase=new Oe(this),this.collisionMatrix=new u,this.collisionMatrixPrevious=new u,this.bodyOverlapKeeper=new ei,this.shapeOverlapKeeper=new ei,this.materials=[],this.contactmaterials=[],this.contactMaterialTable=new ii,this.defaultMaterial=new Zt(\"default\"),this.defaultContactMaterial=new Xt(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:\"addBody\",body:null},this.removeBodyEvent={type:\"removeBody\",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}numObjects(){return this.bodies.length}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);-1!==e&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof X?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s={},i){return s.mode=Z.ALL,s.from=t,s.to=e,s.callback=i,oi.intersectWorld(this,s)}raycastAny(t,e,s={},i){return s.mode=Z.ANY,s.from=t,s.to=e,s.result=i,oi.intersectWorld(this,s)}raycastClosest(t,e,s={},i){return s.mode=Z.CLOSEST,s.from=t,s.to=e,s.result=i,oi.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof M&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,i=s.indexOf(t);if(-1!==i){s.splice(i,1);for(let t=0;t!==s.length;t++)s[t].index=t;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0,i=e.length;s<i;s++){const i=e[s].shapes;for(let e=0,s=i.length;e<s;e++){const s=i[e];if(s.id===t)return s}}}addMaterial(t){this.materials.push(t)}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}step(t,e,s=10){if(void 0===e)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const i=ni.now();let o=0;for(;this.accumulator>=t&&o<s&&(this.internalStep(t),this.accumulator-=t,o++,!(ni.now()-i>2*t*1e3)););this.accumulator=this.accumulator%t;const n=this.accumulator/t;for(let t=0;t!==this.bodies.length;t++){const e=this.bodies[t];e.previousPosition.lerp(e.position,n,e.interpolatedPosition),e.previousQuaternion.slerp(e.quaternion,n,e.interpolatedQuaternion),e.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=ui,i=di,o=this.numObjects(),n=this.bodies,r=this.solver,a=this.gravity,l=this.doProfiling,h=this.profile,c=M.DYNAMIC;let u=-1/0;const d=this.constraints,p=ci,y=(a.length(),a.x),f=a.y,m=a.z;let v=0;for(l&&(u=ni.now()),v=0;v!==o;v++){const t=n[v];if(t.type===c){const e=t.force,s=t.mass;e.x+=s*y,e.y+=s*f,e.z+=s*m}}for(let t=0,e=this.subsystems.length;t!==e;t++)this.subsystems[t].update();l&&(u=ni.now()),s.length=0,i.length=0,this.broadphase.collisionPairs(this,s,i),l&&(h.broadphase=ni.now()-u);let w=d.length;for(v=0;v!==w;v++){const t=d[v];if(!t.collideConnected)for(let e=s.length-1;e>=0;e-=1)(t.bodyA===s[e]&&t.bodyB===i[e]||t.bodyB===s[e]&&t.bodyA===i[e])&&(s.splice(e,1),i.splice(e,1))}this.collisionMatrixTick(),l&&(u=ni.now());const g=hi,b=e.length;for(v=0;v!==b;v++)g.push(e[v]);e.length=0;const x=this.frictionEquations.length;for(v=0;v!==x;v++)p.push(this.frictionEquations[v]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,i,this,e,g,this.frictionEquations,p),l&&(h.narrowphase=ni.now()-u),l&&(u=ni.now()),v=0;v<this.frictionEquations.length;v++)r.addEquation(this.frictionEquations[v]);const z=e.length;for(let t=0;t!==z;t++){const s=e[t],i=s.bi,o=s.bj,n=s.si,a=s.sj;let l;l=i.material&&o.material&&this.getContactMaterial(i.material,o.material)||this.defaultContactMaterial;let h=l.friction;if(i.material&&o.material&&(i.material.friction>=0&&o.material.friction>=0&&(h=i.material.friction*o.material.friction),i.material.restitution>=0&&o.material.restitution>=0&&(s.restitution=i.material.restitution*o.material.restitution)),r.addEquation(s),i.allowSleep&&i.type===M.DYNAMIC&&i.sleepState===M.SLEEPING&&o.sleepState===M.AWAKE&&o.type!==M.STATIC){o.velocity.lengthSquared()+o.angularVelocity.lengthSquared()>=2*o.sleepSpeedLimit**2&&(i.wakeUpAfterNarrowphase=!0)}if(o.allowSleep&&o.type===M.DYNAMIC&&o.sleepState===M.SLEEPING&&i.sleepState===M.AWAKE&&i.type!==M.STATIC){i.velocity.lengthSquared()+i.angularVelocity.lengthSquared()>=2*i.sleepSpeedLimit**2&&(o.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(i,o,!0),this.collisionMatrixPrevious.get(i,o)||(li.body=o,li.contact=s,i.dispatchEvent(li),li.body=i,o.dispatchEvent(li)),this.bodyOverlapKeeper.set(i.id,o.id),this.shapeOverlapKeeper.set(n.id,a.id)}for(this.emitContactEvents(),l&&(h.makeContactConstraints=ni.now()-u,u=ni.now()),v=0;v!==o;v++){const t=n[v];t.wakeUpAfterNarrowphase&&(t.wakeUp(),t.wakeUpAfterNarrowphase=!1)}for(w=d.length,v=0;v!==w;v++){const t=d[v];t.update();for(let e=0,s=t.equations.length;e!==s;e++){const s=t.equations[e];r.addEquation(s)}}r.solve(t,this),l&&(h.solve=ni.now()-u),r.removeAllEquations();const E=Math.pow;for(v=0;v!==o;v++){const e=n[v];if(e.type&c){const s=E(1-e.linearDamping,t),i=e.velocity;i.scale(s,i);const o=e.angularVelocity;if(o){const s=E(1-e.angularDamping,t);o.scale(s,o)}}}for(this.dispatchEvent(ai),v=0;v!==o;v++){const t=n[v];t.preStep&&t.preStep.call(t)}l&&(u=ni.now());const B=this.stepnumber%(this.quatNormalizeSkip+1)==0,S=this.quatNormalizeFast;for(v=0;v!==o;v++)n[v].integrate(t,B,S);for(this.clearForces(),this.broadphase.dirty=!0,l&&(h.integrate=ni.now()-u),this.time+=t,this.stepnumber+=1,this.dispatchEvent(ri),v=0;v!==o;v++){const t=n[v],e=t.postStep;e&&e.call(t)}let A=!0;if(this.allowSleep)for(A=!1,v=0;v!==o;v++){const t=n[v];t.sleepTick(this.time),t.sleepState!==M.SLEEPING&&(A=!0)}this.hasActiveBodies=A}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const e=t[s];e.force,e.torque;e.force.set(0,0,0),e.torque.set(0,0,0)}}}).prototype.emitContactEvents=(()=>{const t=[],e=[],s={type:\"beginContact\",bodyA:null,bodyB:null},i={type:\"endContact\",bodyA:null,bodyB:null},o={type:\"beginShapeContact\",bodyA:null,bodyB:null,shapeA:null,shapeB:null},n={type:\"endShapeContact\",bodyA:null,bodyB:null,shapeA:null,shapeB:null};return function(){const r=this.hasAnyEventListener(\"beginContact\"),a=this.hasAnyEventListener(\"endContact\");if((r||a)&&this.bodyOverlapKeeper.getDiff(t,e),r){for(let e=0,i=t.length;e<i;e+=2)s.bodyA=this.getBodyById(t[e]),s.bodyB=this.getBodyById(t[e+1]),this.dispatchEvent(s);s.bodyA=s.bodyB=null}if(a){for(let t=0,s=e.length;t<s;t+=2)i.bodyA=this.getBodyById(e[t]),i.bodyB=this.getBodyById(e[t+1]),this.dispatchEvent(i);i.bodyA=i.bodyB=null}t.length=e.length=0;const l=this.hasAnyEventListener(\"beginShapeContact\"),h=this.hasAnyEventListener(\"endShapeContact\");if((l||h)&&this.shapeOverlapKeeper.getDiff(t,e),l){for(let e=0,s=t.length;e<s;e+=2){const s=this.getShapeById(t[e]),i=this.getShapeById(t[e+1]);o.shapeA=s,o.shapeB=i,o.bodyA=s.body,o.bodyB=i.body,this.dispatchEvent(o)}o.bodyA=o.bodyB=o.shapeA=o.shapeB=null}if(h){for(let t=0,s=e.length;t<s;t+=2){const s=this.getShapeById(e[t]),i=this.getShapeById(e[t+1]);n.shapeA=s,n.shapeB=i,n.bodyA=s.body,n.bodyB=i.body,this.dispatchEvent(n)}n.bodyA=n.bodyB=n.shapeA=n.shapeB=null}}})();const pi=s(1),yi=t=>{let e=t.transform.x.pinLastValue(),s=t.transform.y.pinLastValue(),i=t.transform.z.pinLastValue();return new o(e,s,i)},fi=(t,e)=>{t.transform.x=e.x,t.transform.y=e.y,t.transform.z=e.z},mi=t=>Math.atan2(t.y,t.x),vi=t=>Math.acos(t.z/t.length()),wi=(t,e,s,i)=>{var o=Math.sqrt(t*t+e*e+s*s);t/=o,e/=o,s/=o;var n=Math.cos(i/2),r=Math.sin(i/2);return pi.quaternion(n,t*r,e*r,s*r)},gi=(t,e)=>{let s=t.length(),i=s>e?e/s:1;return t=t.scale(i)},bi=s(1);s(0);class xi{constructor(t,e){this.sceneObject=t,this.targetObject=e,this.position=yi(t),this.velocity=new o(0,1,0),this.acceleration=new o(0,0,0),this.rotation=bi.quaternionFromAngleAxis(0,bi.vector(0,1,0)),this.maxSpeed=.07,this.maxForce=.1,this.arriveTolerance=.05,this.slowDownTolerance=.2,this.target=yi(this.targetObject),this.initialTargetPosition=yi(this.targetObject),this.awake=!1}update(){this.seek(),this.updatePosition(),this.syncRotation(),this.syncPosition()}spawn(t){this.awake&&this.hardReset(),this.position.copy(yi(t)),this.sceneObject.hidden=!1,this.awake=!0}hardReset(){this.velocity.set(0,1,0),this.acceleration.set(0,0,0),this.target.copy(this.initialTargetPosition)}seek(){let t,e=this.target.vsub(this.position).length();if(e<this.arriveTolerance)this.calcTarget();else{if(t=this.target.vsub(this.position),t.normalize(),t.scale(this.maxSpeed,t),e<this.slowDownTolerance&&e>this.arriveTolerance){let a=(s=e,i=this.arriveTolerance,o=this.slowDownTolerance,n=.05,r=this.maxSpeed,n+(r-n)*(s-i)/(o-i));t.scale(a,t)}else t.scale(this.maxSpeed,t);let a=t.vsub(this.velocity);a=gi(a,this.maxForce),this.acceleration.vadd(a,this.acceleration)}var s,i,o,n,r}calcTarget(){let t=Math.PI/2,e=(s=-t,i=t,s=Math.ceil(s),i=Math.floor(i),Math.floor(Math.random()*(i-s+1)+s));var s,i;let n=new o(this.velocity.x,this.velocity.y,this.velocity.z);n.normalize(),n.scale(.5,n),n.vadd(this.position,n);let r=mi(n),a=vi(n),l=.25*Math.cos(r+e),h=.25*Math.sin(r+e),c=.25*Math.cos(a),u=new o(l,h,c);n.vadd(u,n),n.y<0&&(n.y=.05),n.y>.35&&(n.y=.35),n.x<-.35&&(n.x=-.35),n.x>.35&&(n.x=.35),n.z<-.35&&(n.z=-.35),n.z>.35&&(n.z=.35),this.target.copy(n),fi(this.targetObject,this.target)}updatePosition(){this.velocity.vadd(this.acceleration,this.velocity),this.velocity=gi(this.velocity,this.maxSpeed),this.position.vadd(this.velocity,this.position),this.acceleration.scale(0,this.acceleration)}syncPosition(){fi(this.sceneObject,this.position)}syncRotation(){let t=mi(this.velocity),e=vi(this.velocity),s=wi(0,0,1,t-Math.PI/2);s=s.mul(wi(1,0,0,Math.PI/2-e)),this.sceneObject.transform.rotation=s}}const zi=s(2),Ei=s(3),Bi=s(0),Si=s(4),Ai=s(5);var Fi,Mi,Ci,qi,Ti=[],Pi=0;let Ri=!1;function Ni(){Ci.unsubscribe(),Fi.reverse()}function ji(){qi.unsubscribe(),Mi.reverse()}Promise.all([zi.root.findFirst(\"Agent1\"),zi.root.findFirst(\"Agent2\"),zi.root.findFirst(\"Agent3\"),zi.root.findFirst(\"Agent4\"),zi.root.findFirst(\"Target1\"),zi.root.findFirst(\"Target2\"),zi.root.findFirst(\"Target3\"),zi.root.findFirst(\"Target4\"),zi.root.findFirst(\"planeTracker0\"),zi.root.findFirst(\"AgentSpawnPoint\"),zi.root.findFirst(\"door_l\"),zi.root.findFirst(\"door_r\"),zi.root.findFirst(\"placer\"),zi.root.findFirst(\"spawner\"),zi.root.findFirst(\"Agent5\"),zi.root.findFirst(\"Agent6\"),zi.root.findFirst(\"Agent7\"),zi.root.findFirst(\"Agent8\"),zi.root.findFirst(\"Target5\"),zi.root.findFirst(\"Target6\"),zi.root.findFirst(\"Target7\"),zi.root.findFirst(\"Target8\"),zi.root.findFirst(\"Target9\")]).then((function(t){let e=function(t){return{agent1:t[0],agent2:t[1],agent3:t[2],agent4:t[3],target1:t[4],target2:t[5],target3:t[6],target4:t[7],planeTracker:t[8],agentSpawnPoint:t[9],leftDoor:t[10],rightDoor:t[11],placer:t[12],spawner:t[13],agent5:t[14],agent6:t[15],agent7:t[16],agent8:t[17],target5:t[18],target6:t[19],target7:t[20],target8:t[21]}}(t);var s,i;s=e.planeTracker,i=e.agentSpawnPoint,e.spawner,Si.onTap().subscribe(t=>{let e=t.location;s.performHitTest(e).then(t=>{null===t?Bi.log(\"Nothing found\"):(Ri||(s.trackPoint(e),Ri=!0),function(t){Fi&&Mi&&(Fi.reset(),Mi.reset()),Ci&&qi&&(Ci.unsubscribe(),qi.unsubscribe()),Fi.start(),Mi.start(),Ci=Fi.onCompleted().subscribe(Ni),qi=Mi.onCompleted().subscribe(ji),Ti[Pi].spawn(t),Pi=(Pi+1)%Ti.length}(i))})}),function(t){Si.onPan().subscribe(e=>{t.trackPoint(e.location,e.state)})}(e.planeTracker),function(t){const e=t.transform;Si.onPinch().subscribeWithSnapshot({lastScaleX:e.scaleX,lastScaleY:e.scaleY,lastScalez:e.scaleZ},(t,s)=>{e.scaleX=t.scale.mul(s.lastScaleX),e.scaleY=t.scale.mul(s.lastScaleY),e.scaleZ=t.scale.mul(s.lastScaleZ)})}(e.placer),function(t){const e=t.transform;Si.onRotate().subscribeWithSnapshot({lastRotationY:e.rotationY},(t,s)=>{const i=t.rotation.mul(-1);e.rotationY=i.add(s.lastRotationY)})}(e.placer),function(t,e){const s={durationMilliseconds:700,loopCount:1,mirrot:!1},i=Ai.samplers.linear(0,-.06),o=Ai.samplers.linear(0,.06);Fi=Ai.timeDriver(s),Mi=Ai.timeDriver(s);let n=Ai.animate(Fi,i),r=Ai.animate(Mi,o);t.transform.z=n,e.transform.z=r}(e.leftDoor,e.rightDoor);let o=new xi(e.agent1,e.target1);Ti.push(o),o=new xi(e.agent2,e.target2),Ti.push(o),o=new xi(e.agent3,e.target3),Ti.push(o),o=new xi(e.agent4,e.target4),Ti.push(o),o=new xi(e.agent5,e.target5),Ti.push(o),o=new xi(e.agent6,e.target6),Ti.push(o),o=new xi(e.agent7,e.target7),Ti.push(o),o=new xi(e.agent8,e.target8),Ti.push(o),Bi.log(\"Setup complete\");Ei.setInterval((function(){Ti.forEach(t=>{t.awake&&t.update()})}),15)}))}]);","extractedComments":[]}